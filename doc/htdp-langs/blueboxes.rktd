60106
((3) 0 () 5 ((q lib "lang/htdp-beginner-abbr.rkt") (q lib "lang/htdp-intermediate.rkt") (q lib "lang/htdp-intermediate-lambda.rkt") (q lib "lang/htdp-beginner.rkt") (q lib "lang/htdp-advanced.rkt")) () (h ! (equal) ((c def c (c (? . 0) q remove-all)) q (22397 . 4)) ((c def c (c (? . 2) q lcm)) q (47949 . 4)) ((c def c (c (? . 3) q angle)) q (2400 . 3)) ((c def c (c (? . 0) q cadar)) q (20470 . 3)) ((c def c (c (? . 1) q third)) q (36837 . 3)) ((c def c (c (? . 1) q string-ci>=?)) q (39768 . 5)) ((c form c (c (? . 1) q let*)) q (28375 . 2)) ((c def c (c (? . 2) q rest)) q (52544 . 3)) ((c def c (c (? . 0) q symbol=?)) q (19926 . 4)) ((c def c (c (? . 1) q cons?)) q (35231 . 3)) ((c def c (c (? . 3) q string<=?)) q (12489 . 5)) ((c def c (c (? . 1) q pi)) q (32807 . 2)) ((c form c (c (? . 3) q ......)) q (118 . 2)) ((c def c (c (? . 3) q odd?)) q (4426 . 3)) ((c def c (c (? . 2) q integer?)) q (47895 . 3)) ((c form c (c (? . 0) q define)) q (14350 . 2)) ((c def c (c (? . 2) q cdar)) q (50879 . 3)) ((c def c (c (? . 3) q empty?)) q (7024 . 3)) ((c def c (c (? . 1) q -)) q (30073 . 4)) ((c def c (c (? . 0) q equal?)) q (27715 . 4)) ((c def c (c (? . 3) q char?)) q (10195 . 3)) ((c def c (c (? . 3) q list*)) q (7332 . 4)) ((c def c (c (? . 4) q identity)) q (74792 . 3)) ((c def c (c (? . 3) q symbol->string)) q (5685 . 3)) ((c def c (c (? . 1) q list-ref)) q (35711 . 4)) ((c def c (c (? . 4) q *)) q (75081 . 3)) ((c def c (c (? . 2) q cadar)) q (50545 . 3)) ((c form c (c (? . 1) q time)) q (28484 . 2)) ((c def c (c (? . 4) q string-length)) q (72846 . 3)) ((c def c (c (? . 4) q gensym)) q (74760 . 2)) ((c form c (c (? . 0) q unquote)) q (14263 . 2)) ((c def c (c (? . 3) q char>?)) q (10103 . 5)) ((c def c (c (? . 1) q char-whitespace?)) q (37979 . 3)) ((c def c (c (? . 4) q error)) q (74636 . 3)) ((c def c (c (? . 0) q implode)) q (24565 . 3)) ((c def c (c (? . 3) q char-ci<=?)) q (8909 . 5)) ((c def c (c (? . 2) q seventh)) q (52689 . 3)) ((c form c (c (? . 4) q Î»)) q (60176 . 2)) ((c def c (c (? . 2) q >=)) q (46449 . 5)) ((c def c (c (? . 3) q max)) q (3994 . 4)) ((c def c (c (? . 0) q +)) q (15744 . 5)) ((c def c (c (? . 3) q cddr)) q (6765 . 3)) ((c form c (c (? . 1) q quasiquote)) q (28612 . 2)) ((c def c (c (? . 4) q inexact->exact)) q (64048 . 3)) ((c def c (c (? . 3) q min)) q (4061 . 4)) ((c def c (c (? . 2) q memq?)) q (52075 . 4)) ((c def c (c (? . 0) q number->string)) q (18438 . 3)) ((c def c (c (? . 4) q argmax)) q (75514 . 4)) ((c def c (c (? . 1) q string)) q (39018 . 3)) ((c def c (c (? . 2) q numerator)) q (48647 . 3)) ((c def c (c (? . 1) q add1)) q (30680 . 3)) ((c def c (c (? . 4) q map)) q (76326 . 4)) ((c def c (c (? . 1) q char<?)) q (38133 . 5)) ((c def c (c (? . 3) q exact?)) q (3032 . 3)) ((c def c (c (? . 0) q struct?)) q (28087 . 3)) ((c def c (c (? . 0) q even?)) q (17102 . 3)) ((c form c (c (? . 3) q define-struct)) q (334 . 2)) ((c def c (c (? . 4) q replicate)) q (71437 . 4)) ((c def c (c (? . 2) q make-string)) q (54804 . 4)) ((c def c (c (? . 0) q eighth)) q (21157 . 3)) ((c def c (c (? . 2) q string>=?)) q (57047 . 5)) ((c def c (c (? . 0) q imag-part)) q (17509 . 3)) ((c def c (c (? . 1) q build-string)) q (42937 . 4)) ((c def c (c (? . 3) q string->int)) q (10766 . 3)) ((c def c (c (? . 0) q string->symbol)) q (25146 . 3)) ((c def c (c (? . 1) q cdadr)) q (34881 . 3)) ((c def c (c (? . 1) q cadar)) q (34595 . 3)) ((c def c (c (? . 0) q floor)) q (17384 . 3)) ((c def c (c (? . 3) q char-upper-case?)) q (9611 . 3)) ((c def c (c (? . 2) q string<?)) q (56847 . 5)) ((c def c (c (? . 0) q string-ci=?)) q (25540 . 5)) ((c def c (c (? . 0) q asin)) q (16630 . 3)) ((c def c (c (? . 1) q argmin)) q (42776 . 4)) ((c def c (c (? . 2) q foldl)) q (59147 . 5)) ((c def c (c (? . 2) q asin)) q (46727 . 3)) ((c def c (c (? . 2) q char-ci>?)) q (53548 . 5)) ((c def c (c (? . 0) q positive?)) q (18678 . 3)) ((c def c (c (? . 2) q sinh)) q (49369 . 3)) ((c def c (c (? . 1) q boolean?)) q (33856 . 3)) ((c def c (c (? . 1) q empty?)) q (35331 . 3)) ((c def c (c (? . 1) q sgn)) q (33292 . 3)) ((c def c (c (? . 4) q complex?)) q (63266 . 3)) ((c def c (c (? . 2) q symbol->string)) q (49964 . 3)) ((c def c (c (? . 0) q cdr)) q (20994 . 3)) ((c def c (c (? . 3) q negative?)) q (4202 . 3)) ((c def c (c (? . 3) q log)) q (3746 . 3)) ((c def c (c (? . 1) q real?)) q (33115 . 3)) ((c def c (c (? . 4) q hash-eqv?)) q (78563 . 3)) ((c def c (c (? . 3) q cadddr)) q (6336 . 3)) ((c def c (c (? . 3) q cadr)) q (6433 . 3)) ((c def c (c (? . 2) q list?)) q (51734 . 3)) ((c def c (c (? . 1) q string-copy)) q (40144 . 3)) ((c def c (c (? . 4) q cdaar)) q (67173 . 3)) ((c def c (c (? . 1) q negative?)) q (32531 . 3)) ((c def c (c (? . 0) q <=)) q (16084 . 5)) ((c def c (c (? . 4) q zero?)) q (66002 . 3)) ((c def c (c (? . 0) q rest)) q (22469 . 3)) ((c def c (c (? . 2) q posn-x)) q (52905 . 3)) ((c def c (c (? . 4) q string-lower-case?)) q (72901 . 3)) ((c def c (c (? . 4) q sin)) q (65711 . 3)) ((c def c (c (? . 2) q sgn)) q (49242 . 3)) ((c def c (c (? . 4) q boolean?)) q (66196 . 3)) ((c def c (c (? . 4) q box)) q (78143 . 3)) ((c def c (c (? . 1) q implode)) q (38690 . 3)) ((c def c (c (? . 2) q pi)) q (48757 . 2)) ((c def c (c (? . 1) q foldl)) q (43197 . 5)) ((c def c (c (? . 4) q expt)) q (63802 . 4)) ((c def c (c (? . 4) q with-input-from-string)) q (77222 . 4)) ((c def c (c (? . 0) q expt)) q (17315 . 4)) ((c def c (c (? . 0) q zero?)) q (19515 . 3)) ((c def c (c (? . 4) q make-string)) q (71355 . 4)) ((c def c (c (? . 1) q eq?)) q (41772 . 4)) ((c def c (c (? . 2) q exact->inexact)) q (47252 . 3)) ((c def c (c (? . 2) q procedure?)) q (59744 . 3)) ((c def c (c (? . 3) q even?)) q (2920 . 3)) ((c form c (c (? . 2) q and)) q (45246 . 2)) ((c def c (c (? . 0) q exp)) q (17267 . 3)) ((c def c (c (? . 4) q int->string)) q (71242 . 3)) ((c def c (c (? . 1) q equal~?)) q (41911 . 5)) ((c def c (c (? . 4) q set-posn-x!)) q (69460 . 4)) ((c def c (c (? . 4) q hash-equal?)) q (78507 . 3)) ((c def c (c (? . 1) q exact->inexact)) q (31302 . 3)) ((c def c (c (? . 4) q make-immutable-hasheqv)) q (79859 . 2)) ((c def c (c (? . 4) q eqv?)) q (74567 . 4)) ((c form c (c (? . 4) q lambda)) q (60131 . 2)) ((c def c (c (? . 3) q fifth)) q (7076 . 3)) ((c def c (c (? . 4) q string)) q (71519 . 3)) ((c def c (c (? . 1) q posn-x)) q (36955 . 3)) ((c def c (c (? . 3) q imag-part)) q (3327 . 3)) ((c def c (c (? . 4) q hash-set)) q (79192 . 5)) ((c def c (c (? . 0) q boolean?)) q (19709 . 3)) ((c def c (c (? . 0) q >=)) q (16352 . 5)) ((c def c (c (? . 3) q string-numeric?)) q (12158 . 3)) ((c def c (c (? . 3) q remainder)) q (4837 . 4)) ((c def c (c (? . 1) q sub1)) q (33565 . 3)) ((c def c (c (? . 3) q image?)) q (13226 . 3)) ((c def c (c (? . 1) q symbol=?)) q (34073 . 4)) ((c def c (c (? . 1) q inexact?)) q (31767 . 3)) ((c def c (c (? . 2) q string-downcase)) q (56150 . 3)) ((c def c (c (? . 1) q sqr)) q (33468 . 3)) ((c def c (c (? . 4) q string-ci>=?)) q (72269 . 5)) ((c def c (c (? . 4) q current-seconds)) q (63471 . 2)) ((c form c (c (? . 3) q if)) q (599 . 4)) ((c def c (c (? . 0) q real?)) q (18968 . 3)) ((c def c (c (? . 3) q char-upcase)) q (9559 . 3)) ((c def c (c (? . 0) q /)) q (15906 . 5)) ((c def c (c (? . 3) q conjugate)) q (2651 . 3)) ((c def c (c (? . 0) q cddr)) q (20947 . 3)) ((c def c (c (? . 4) q null)) q (68638 . 2)) ((c def c (c (? . 0) q remove)) q (22329 . 4)) ((c def c (c (? . 3) q cdadr)) q (6574 . 3)) ((c def c (c (? . 0) q caaar)) q (20327 . 3)) ((c def c (c (? . 2) q magnitude)) q (48073 . 3)) ((c def c (c (? . 2) q quotient)) q (48829 . 4)) ((c def c (c (? . 2) q argmax)) q (58648 . 4)) ((c def c (c (? . 2) q string-ci>=?)) q (55718 . 5)) ((c def c (c (? . 1) q length)) q (35528 . 3)) ((c def c (c (? . 2) q implode)) q (54640 . 3)) ((c form c (c (? . 0) q .....)) q (14063 . 2)) ((c def c (c (? . 1) q assq)) q (34369 . 4)) ((c def c (c (? . 3) q char<?)) q (9826 . 5)) ((c def c (c (? . 3) q make-string)) q (10547 . 4)) ((c def c (c (? . 1) q memf)) q (43602 . 4)) ((c def c (c (? . 0) q char-upcase)) q (23741 . 3)) ((c def c (c (? . 2) q list*)) q (51589 . 4)) ((c def c (c (? . 1) q andmap)) q (42470 . 4)) ((c def c (c (? . 3) q identity)) q (13856 . 3)) ((c def c (c (? . 2) q sort)) q (59901 . 4)) ((c def c (c (? . 4) q symbol?)) q (66488 . 3)) ((c def c (c (? . 3) q caaar)) q (6145 . 3)) ((c def c (c (? . 3) q char->integer)) q (8791 . 3)) ((c def c (c (? . 0) q substring)) q (27226 . 5)) ((c def c (c (? . 4) q posn?)) q (69409 . 3)) ((c def c (c (? . 0) q cons)) q (21040 . 4)) ((c def c (c (? . 0) q car)) q (20662 . 3)) ((c def c (c (? . 1) q image=?)) q (41461 . 4)) ((c def c (c (? . 1) q rest)) q (36594 . 3)) ((c form c (c (? . 1) q define-struct)) q (28936 . 2)) ((c def c (c (? . 2) q sqrt)) q (49466 . 3)) ((c def c (c (? . 1) q modulo)) q (32457 . 4)) ((c def c (c (? . 0) q string->number)) q (25070 . 3)) ((c def c (c (? . 4) q string<=?)) q (73297 . 5)) ((c def c (c (? . 3) q cos)) q (2705 . 3)) ((c def c (c (? . 1) q argmax)) q (42698 . 4)) ((c form c (c (? . 2) q check-random)) q (45408 . 2)) ((c def c (c (? . 4) q positive?)) q (65165 . 3)) ((c def c (c (? . 3) q zero?)) q (5333 . 3)) ((c def c (c (? . 3) q memv)) q (7888 . 4)) ((c def c (c (? . 3) q positive?)) q (4496 . 3)) ((c def c (c (? . 3) q integer?)) q (3616 . 3)) ((c def c (c (? . 4) q unbox)) q (78306 . 3)) ((c def c (c (? . 0) q posn-x)) q (22830 . 3)) ((c def c (c (? . 4) q pi)) q (65147 . 2)) ((c def c (c (? . 0) q random)) q (18808 . 3)) ((c def c (c (? . 2) q string-upper-case?)) q (56616 . 3)) ((c def c (c (? . 2) q eq?)) q (57722 . 4)) ((c def c (c (? . 2) q true)) q (44072 . 2)) ((c def c (c (? . 2) q false?)) q (49860 . 3)) ((c form c (c (? . 0) q check-member-of)) q (15286 . 2)) ((c def c (c (? . 2) q filter)) q (59054 . 4)) ((c def c (c (? . 4) q string>=?)) q (73598 . 5)) ((c def c (c (? . 1) q empty)) q (28140 . 2)) ((c def c (c (? . 4) q cdr)) q (67459 . 3)) ((c def c (c (? . 4) q eighth)) q (67630 . 3)) ((c def c (c (? . 2) q apply)) q (58524 . 5)) ((c form c (c (? . 4) q case)) q (60656 . 2)) ((c def c (c (? . 0) q string-ci>=?)) q (25643 . 5)) ((c form c (c (? . 4) q delay)) q (60456 . 2)) ((c def c (c (? . 0) q eof-object?)) q (27590 . 3)) ((c def c (c (? . 1) q assoc)) q (34271 . 4)) ((c def c (c (? . 3) q assoc)) q (5964 . 4)) ((c def c (c (? . 4) q remove-all)) q (68884 . 4)) ((c def c (c (? . 4) q memv)) q (68557 . 4)) ((c def c (c (? . 1) q exit)) q (42136 . 2)) ((c def c (c (? . 2) q cosh)) q (47032 . 3)) ((c def c (c (? . 0) q cadddr)) q (20518 . 3)) ((c form c (c (? . 2) q check-satisfied)) q (45463 . 2)) ((c form c (c (? . 2) q ....)) q (44142 . 2)) ((c def c (c (? . 0) q char<?)) q (24008 . 5)) ((c def c (c (? . 3) q pi)) q (4478 . 2)) ((c form c (c (? . 0) q check-satisfied)) q (15093 . 2)) ((c def c (c (? . 1) q sixth)) q (36789 . 3)) ((c form c (c (? . 3) q or)) q (748 . 2)) ((c def c (c (? . 0) q posn-y)) q (22876 . 3)) ((c def c (c (? . 4) q hash-update)) q (79376 . 5)) ((c def c (c (? . 4) q number->string)) q (64925 . 3)) ((c def c (c (? . 2) q int->string)) q (54691 . 3)) ((c def c (c (? . 0) q add1)) q (16533 . 3)) ((c def c (c (? . 2) q make-posn)) q (52835 . 4)) ((c def c (c (? . 2) q string-numeric?)) q (56415 . 3)) ((c def c (c (? . 4) q char-upper-case?)) q (70419 . 3)) ((c def c (c (? . 0) q seventh)) q (22614 . 3)) ((c def c (c (? . 3) q asin)) q (2448 . 3)) ((c def c (c (? . 3) q expt)) q (3133 . 4)) ((c def c (c (? . 3) q sixth)) q (8482 . 3)) ((c def c (c (? . 4) q procedure?)) q (76610 . 3)) ((c def c (c (? . 1) q range)) q (36347 . 5)) ((c form c (c (? . 1) q check-random)) q (29458 . 2)) ((c def c (c (? . 4) q cddr)) q (67412 . 3)) ((c def c (c (? . 1) q cdddr)) q (35024 . 3)) ((c def c (c (? . 0) q empty?)) q (21206 . 3)) ((c def c (c (? . 0) q memv)) q (22070 . 4)) ((c def c (c (? . 3) q eof-object?)) q (13408 . 3)) ((c def c (c (? . 3) q posn-y)) q (8694 . 3)) ((c def c (c (? . 4) q list*)) q (67987 . 4)) ((c def c (c (? . 2) q string-append)) q (55345 . 3)) ((c form c (c (? . 3) q define)) q (132 . 2)) ((c def c (c (? . 1) q string<?)) q (40897 . 5)) ((c def c (c (? . 0) q exit)) q (28011 . 2)) ((c def c (c (? . 4) q inexact?)) q (64107 . 3)) ((c def c (c (? . 0) q conjugate)) q (16833 . 3)) ((c def c (c (? . 1) q +)) q (42316 . 3)) ((c def c (c (? . 1) q current-seconds)) q (31131 . 2)) ((c def c (c (? . 1) q cddr)) q (35072 . 3)) ((c def c (c (? . 1) q cosh)) q (31082 . 3)) ((c def c (c (? . 1) q atan)) q (30826 . 3)) ((c def c (c (? . 3) q string-downcase)) q (11893 . 3)) ((c def c (c (? . 0) q char?)) q (24377 . 3)) ((c def c (c (? . 3) q char<=?)) q (9733 . 5)) ((c form c (c (? . 0) q check-error)) q (15203 . 3)) ((c form c (c (? . 2) q or)) q (45300 . 2)) ((c def c (c (? . 2) q append)) q (50151 . 3)) ((c def c (c (? . 1) q string->symbol)) q (39271 . 3)) ((c def c (c (? . 2) q member?)) q (51934 . 4)) ((c def c (c (? . 1) q numerator)) q (32697 . 3)) ((c def c (c (? . 1) q char-alphabetic?)) q (37155 . 3)) ((c form c (c (? . 1) q or)) q (29350 . 2)) ((c def c (c (? . 2) q argmin)) q (58726 . 4)) ((c def c (c (? . 4) q vector->list)) q (77799 . 3)) ((c def c (c (? . 4) q string-append)) q (71896 . 3)) ((c def c (c (? . 3) q char-ci>?)) q (9291 . 5)) ((c def c (c (? . 1) q min)) q (32390 . 4)) ((c def c (c (? . 1) q equal?)) q (41840 . 4)) ((c def c (c (? . 2) q imag-part)) q (47606 . 3)) ((c def c (c (? . 2) q conjugate)) q (46930 . 3)) ((c form c (c (? . 1) q define)) q (28770 . 2)) ((c def c (c (? . 4) q write)) q (77459 . 3)) ((c def c (c (? . 2) q char-upper-case?)) q (53868 . 3)) ((c def c (c (? . 0) q log)) q (17928 . 3)) ((c def c (c (? . 2) q expt)) q (47412 . 4)) ((c def c (c (? . 2) q char>?)) q (54360 . 5)) ((c def c (c (? . 2) q char<?)) q (54083 . 5)) ((c def c (c (? . 4) q newline)) q (76912 . 2)) ((c def c (c (? . 4) q string->list)) q (71631 . 3)) ((c def c (c (? . 1) q string-numeric?)) q (40465 . 3)) ((c form c (c (? . 4) q unless)) q (60932 . 2)) ((c def c (c (? . 2) q gcd)) q (47530 . 4)) ((c def c (c (? . 4) q force)) q (74716 . 3)) ((c def c (c (? . 2) q char?)) q (54452 . 3)) ((c def c (c (? . 3) q =~)) q (13278 . 5)) ((c form c (c (? . 2) q require)) q (45788 . 2)) ((c def c (c (? . 0) q length)) q (21403 . 3)) ((c def c (c (? . 4) q rest)) q (68956 . 3)) ((c def c (c (? . 4) q imag-part)) q (63996 . 3)) ((c form c (c (? . 4) q ....)) q (60092 . 2)) ((c def c (c (? . 1) q positive?)) q (32825 . 3)) ((c def c (c (? . 3) q random)) q (4626 . 3)) ((c def c (c (? . 1) q symbol?)) q (34148 . 3)) ((c def c (c (? . 4) q string-downcase)) q (72701 . 3)) ((c form c (c (? . 4) q when)) q (60880 . 2)) ((c def c (c (? . 4) q first)) q (67779 . 3)) ((c def c (c (? . 4) q struct?)) q (74951 . 3)) ((c def c (c (? . 4) q image=?)) q (73962 . 4)) ((c def c (c (? . 2) q <=)) q (46181 . 5)) ((c def c (c (? . 0) q inexact->exact)) q (17561 . 3)) ((c form c (c (? . 4) q if)) q (61541 . 4)) ((c def c (c (? . 2) q integer->char)) q (47772 . 3)) ((c def c (c (? . 4) q char-numeric?)) q (70309 . 3)) ((c def c (c (? . 2) q char=?)) q (54175 . 5)) ((c def c (c (? . 0) q list-ref)) q (21586 . 4)) ((c def c (c (? . 0) q string-contains-ci?)) q (25850 . 4)) ((c def c (c (? . 2) q exact?)) q (47311 . 3)) ((c def c (c (? . 1) q memv)) q (36195 . 4)) ((c def c (c (? . 4) q atan)) q (63166 . 3)) ((c def c (c (? . 2) q string<=?)) q (56746 . 5)) ((c def c (c (? . 4) q >)) q (62752 . 5)) ((c def c (c (? . 4) q angle)) q (63069 . 3)) ((c def c (c (? . 3) q magnitude)) q (3794 . 3)) ((c def c (c (? . 2) q quicksort)) q (59798 . 4)) ((c def c (c (? . 2) q empty?)) q (51281 . 3)) ((c def c (c (? . 1) q first)) q (35431 . 3)) ((c def c (c (? . 0) q char-alphabetic?)) q (23030 . 3)) ((c def c (c (? . 0) q string-ci<=?)) q (25333 . 5)) ((c def c (c (? . 4) q list)) q (67935 . 3)) ((c def c (c (? . 0) q caddr)) q (20567 . 3)) ((c def c (c (? . 2) q string->symbol)) q (55221 . 3)) ((c def c (c (? . 0) q >)) q (16265 . 5)) ((c form c (c (? . 2) q check-expect)) q (45353 . 2)) ((c form c (c (? . 4) q letrec)) q (61032 . 2)) ((c form c (c (? . 2) q check-within)) q (45511 . 2)) ((c def c (c (? . 4) q asin)) q (63117 . 3)) ((c def c (c (? . 3) q string)) q (10711 . 3)) ((c def c (c (? . 1) q cdar)) q (34929 . 3)) ((c def c (c (? . 4) q eof-object?)) q (74268 . 3)) ((c def c (c (? . 3) q +)) q (1562 . 5)) ((c def c (c (? . 1) q <=)) q (30231 . 5)) ((c def c (c (? . 1) q quotient)) q (32879 . 4)) ((c def c (c (? . 4) q range)) q (68709 . 5)) ((c def c (c (? . 4) q compose)) q (75836 . 4)) ((c def c (c (? . 2) q string?)) q (57248 . 3)) ((c def c (c (? . 0) q cdaar)) q (20708 . 3)) ((c def c (c (? . 2) q char-ci=?)) q (53357 . 5)) ((c def c (c (? . 1) q map)) q (43510 . 4)) ((c def c (c (? . 3) q image=?)) q (13154 . 4)) ((c def c (c (? . 0) q e)) q (17085 . 2)) ((c def c (c (? . 1) q sort)) q (43951 . 4)) ((c def c (c (? . 1) q seventh)) q (36739 . 3)) ((c def c (c (? . 4) q substring)) q (73852 . 5)) ((c def c (c (? . 2) q string-ci<=?)) q (55408 . 5)) ((c def c (c (? . 0) q string=?)) q (26872 . 5)) ((c def c (c (? . 4) q memf)) q (76418 . 4)) ((c def c (c (? . 4) q make-vector)) q (77660 . 4)) ((c def c (c (? . 4) q sort)) q (76767 . 4)) ((c def c (c (? . 2) q string-ref)) q (56477 . 4)) ((c def c (c (? . 1) q string->number)) q (39195 . 3)) ((c def c (c (? . 2) q number->string)) q (48535 . 3)) ((c def c (c (? . 3) q current-seconds)) q (2802 . 2)) ((c def c (c (? . 4) q round)) q (65583 . 3)) ((c def c (c (? . 1) q >)) q (30412 . 5)) ((c def c (c (? . 2) q char-downcase)) q (53643 . 3)) ((c def c (c (? . 4) q char-whitespace?)) q (70480 . 3)) ((c def c (c (? . 4) q make-list)) q (68195 . 4)) ((c def c (c (? . 4) q max)) q (64663 . 4)) ((c def c (c (? . 0) q round)) q (19096 . 3)) ((c def c (c (? . 0) q string<?)) q (26772 . 5)) ((c def c (c (? . 3) q string-ci<=?)) q (11151 . 5)) ((c def c (c (? . 3) q string=?)) q (12690 . 5)) ((c def c (c (? . 1) q string-ci<=?)) q (39458 . 5)) ((c def c (c (? . 3) q char=?)) q (9918 . 5)) ((c def c (c (? . 4) q cdddr)) q (67364 . 3)) ((c def c (c (? . 4) q false)) q (60046 . 2)) ((c def c (c (? . 0) q rational?)) q (18861 . 3)) ((c def c (c (? . 3) q acos)) q (2302 . 3)) ((c form c (c (? . 2) q cond)) q (44987 . 5)) ((c def c (c (? . 2) q char-alphabetic?)) q (53105 . 3)) ((c def c (c (? . 0) q char-lower-case?)) q (23622 . 3)) ((c def c (c (? . 4) q integer->char)) q (64162 . 3)) ((c def c (c (? . 4) q equal?)) q (74393 . 4)) ((c def c (c (? . 2) q image?)) q (57483 . 3)) ((c def c (c (? . 4) q current-milliseconds)) q (74190 . 2)) ((c def c (c (? . 3) q char-ci<?)) q (9005 . 5)) ((c def c (c (? . 4) q list-ref)) q (68073 . 4)) ((c def c (c (? . 2) q inexact?)) q (47717 . 3)) ((c def c (c (? . 1) q string-append)) q (39395 . 3)) ((c def c (c (? . 2) q string-ci=?)) q (55615 . 5)) ((c def c (c (? . 2) q cdadr)) q (50831 . 3)) ((c def c (c (? . 3) q add1)) q (2351 . 3)) ((c def c (c (? . 4) q char?)) q (71003 . 3)) ((c def c (c (? . 2) q string->int)) q (55023 . 3)) ((c form c (c (? . 0) q ..)) q (14030 . 2)) ((c def c (c (? . 4) q true)) q (60022 . 2)) ((c def c (c (? . 0) q =)) q (16172 . 5)) ((c form c (c (? . 0) q ......)) q (14076 . 2)) ((c def c (c (? . 2) q null?)) q (52246 . 3)) ((c def c (c (? . 2) q first)) q (51381 . 3)) ((c def c (c (? . 0) q string-lower-case?)) q (26275 . 3)) ((c form c (c (? . 3) q check-expect)) q (801 . 2)) ((c def c (c (? . 0) q max)) q (18176 . 4)) ((c def c (c (? . 1) q cdr)) q (35119 . 3)) ((c def c (c (? . 0) q sixth)) q (22664 . 3)) ((c form c (c (? . 3) q require)) q (1236 . 2)) ((c def c (c (? . 1) q conjugate)) q (30980 . 3)) ((c def c (c (? . 4) q build-string)) q (75753 . 4)) ((c def c (c (? . 4) q char<?)) q (70634 . 5)) ((c form c (c (? . 2) q unquote-splicing)) q (44891 . 2)) ((c def c (c (? . 4) q hash-eq?)) q (78455 . 3)) ((c def c (c (? . 1) q boolean->string)) q (33714 . 3)) ((c form c (c (? . 4) q check-range)) q (62112 . 2)) ((c def c (c (? . 1) q even?)) q (31249 . 3)) ((c def c (c (? . 4) q char=?)) q (70726 . 5)) ((c form c (c (? . 1) q unquote-splicing)) q (28732 . 2)) ((c def c (c (? . 0) q string-length)) q (26220 . 3)) ((c def c (c (? . 4) q =~)) q (74086 . 5)) ((c def c (c (? . 2) q string->number)) q (55145 . 3)) ((c def c (c (? . 0) q string>?)) q (27073 . 5)) ((c def c (c (? . 0) q char-ci<=?)) q (23091 . 5)) ((c def c (c (? . 4) q hash-remove)) q (79033 . 4)) ((c def c (c (? . 4) q symbol=?)) q (66413 . 4)) ((c def c (c (? . 2) q char>=?)) q (54267 . 5)) ((c form c (c (? . 4) q check-error)) q (61963 . 3)) ((c def c (c (? . 2) q image=?)) q (57411 . 4)) ((c def c (c (? . 3) q string>=?)) q (12790 . 5)) ((c def c (c (? . 0) q cdadr)) q (20756 . 3)) ((c def c (c (? . 3) q string-ci>?)) q (11565 . 5)) ((c def c (c (? . 2) q string-ith)) q (56210 . 4)) ((c def c (c (? . 1) q reverse)) q (36641 . 3)) ((c def c (c (? . 2) q sqr)) q (49418 . 3)) ((c def c (c (? . 2) q cons)) q (51115 . 4)) ((c def c (c (? . 2) q inexact->exact)) q (47658 . 3)) ((c def c (c (? . 1) q string=?)) q (40997 . 5)) ((c def c (c (? . 3) q append)) q (5872 . 5)) ((c form c (c (? . 2) q check-range)) q (45722 . 2)) ((c def c (c (? . 3) q member)) q (7606 . 4)) ((c def c (c (? . 1) q string-whitespace?)) q (40731 . 3)) ((c def c (c (? . 0) q magnitude)) q (17976 . 3)) ((c def c (c (? . 0) q real-part)) q (18916 . 3)) ((c def c (c (? . 0) q string-ref)) q (26402 . 4)) ((c def c (c (? . 2) q add1)) q (46630 . 3)) ((c def c (c (? . 3) q string-alphabetic?)) q (11023 . 3)) ((c def c (c (? . 1) q identity)) q (42163 . 3)) ((c def c (c (? . 2) q assq)) q (50319 . 4)) ((c form c (c (? . 3) q and)) q (694 . 2)) ((c def c (c (? . 4) q floor)) q (63871 . 3)) ((c def c (c (? . 2) q car)) q (50737 . 3)) ((c def c (c (? . 4) q hash-map)) q (78788 . 4)) ((c form c (c (? . 3) q ...)) q (82 . 2)) ((c def c (c (? . 1) q integer->char)) q (31822 . 3)) ((c def c (c (? . 4) q sqr)) q (65808 . 3)) ((c def c (c (? . 0) q explode)) q (24428 . 3)) ((c def c (c (? . 3) q string-ci<?)) q (11255 . 5)) ((c def c (c (? . 3) q substring)) q (13044 . 5)) ((c def c (c (? . 4) q gcd)) q (63920 . 4)) ((c def c (c (? . 0) q lcm)) q (17852 . 4)) ((c def c (c (? . 0) q not)) q (19815 . 3)) ((c def c (c (? . 4) q string-ref)) q (73028 . 4)) ((c def c (c (? . 1) q build-list)) q (42854 . 4)) ((c def c (c (? . 0) q remainder)) q (19019 . 4)) ((c def c (c (? . 1) q remove)) q (36454 . 4)) ((c def c (c (? . 4) q remainder)) q (65506 . 4)) ((c def c (c (? . 2) q format)) q (54565 . 4)) ((c def c (c (? . 1) q null?)) q (36296 . 3)) ((c def c (c (? . 4) q negative?)) q (64871 . 3)) ((c def c (c (? . 2) q second)) q (52640 . 3)) ((c def c (c (? . 0) q append)) q (20054 . 5)) ((c def c (c (? . 3) q char-downcase)) q (9386 . 3)) ((c def c (c (? . 3) q exp)) q (3085 . 3)) ((c def c (c (? . 3) q explode)) q (10246 . 3)) ((c def c (c (? . 3) q reverse)) q (8334 . 3)) ((c def c (c (? . 0) q equal~?)) q (27786 . 5)) ((c form c (c (? . 3) q check-within)) q (959 . 2)) ((c def c (c (? . 4) q cosh)) q (63422 . 3)) ((c form c (c (? . 1) q check-expect)) q (29403 . 2)) ((c def c (c (? . 0) q cdddr)) q (20899 . 3)) ((c def c (c (? . 2) q string-lower-case?)) q (56350 . 3)) ((c def c (c (? . 2) q false)) q (44096 . 2)) ((c def c (c (? . 2) q posn?)) q (52997 . 3)) ((c def c (c (? . 4) q string-alphabetic?)) q (71831 . 3)) ((c form c (c (? . 0) q cond)) q (14617 . 5)) ((c def c (c (? . 3) q string-ith)) q (11953 . 4)) ((c def c (c (? . 3) q string-whitespace?)) q (12424 . 3)) ((c def c (c (? . 2) q abs)) q (46537 . 3)) ((c def c (c (? . 0) q make-posn)) q (22760 . 4)) ((c def c (c (? . 2) q char-ci<=?)) q (53166 . 5)) ((c form c (c (? . 2) q ......)) q (44167 . 2)) ((c def c (c (? . 3) q cons?)) q (6924 . 3)) ((c def c (c (? . 3) q inexact?)) q (3438 . 3)) ((c form c (c (? . 2) q check-member-of)) q (45656 . 2)) ((c def c (c (? . 3) q char-numeric?)) q (9501 . 3)) ((c def c (c (? . 2) q build-string)) q (58887 . 4)) ((c def c (c (? . 3) q char>=?)) q (10010 . 5)) ((c def c (c (? . 1) q eqv?)) q (42014 . 4)) ((c def c (c (? . 2) q null)) q (52226 . 2)) ((c def c (c (? . 4) q char>?)) q (70911 . 5)) ((c def c (c (? . 3) q caddr)) q (6385 . 3)) ((c def c (c (? . 0) q caar)) q (20423 . 3)) ((c def c (c (? . 4) q char-upcase)) q (70367 . 3)) ((c def c (c (? . 1) q char=?)) q (38225 . 5)) ((c def c (c (? . 4) q box?)) q (78188 . 3)) ((c def c (c (? . 4) q equal~?)) q (74464 . 5)) ((c def c (c (? . 1) q ormap)) q (43706 . 4)) ((c def c (c (? . 3) q posn?)) q (8740 . 3)) ((c def c (c (? . 2) q cdr)) q (51069 . 3)) ((c def c (c (? . 3) q real-part)) q (4734 . 3)) ((c def c (c (? . 3) q range)) q (8040 . 5)) ((c def c (c (? . 4) q cddar)) q (67316 . 3)) ((c def c (c (? . 0) q quotient)) q (18732 . 4)) ((c def c (c (? . 0) q char<=?)) q (23915 . 5)) ((c def c (c (? . 1) q format)) q (38615 . 4)) ((c def c (c (? . 1) q posn?)) q (37047 . 3)) ((c def c (c (? . 4) q build-list)) q (75670 . 4)) ((c def c (c (? . 0) q char->integer)) q (22973 . 3)) ((c def c (c (? . 1) q asin)) q (30777 . 3)) ((c def c (c (? . 4) q image?)) q (74034 . 3)) ((c def c (c (? . 2) q >)) q (46362 . 5)) ((c form c (c (? . 3) q check-range)) q (1170 . 2)) ((c def c (c (? . 3) q >)) q (2083 . 5)) ((c def c (c (? . 4) q build-vector)) q (77504 . 4)) ((c def c (c (? . 0) q string->list)) q (25005 . 3)) ((c def c (c (? . 4) q exact->inexact)) q (63642 . 3)) ((c def c (c (? . 2) q sin)) q (49321 . 3)) ((c def c (c (? . 1) q =)) q (30319 . 5)) ((c def c (c (? . 1) q memq)) q (36056 . 4)) ((c def c (c (? . 0) q string)) q (24893 . 3)) ((c form c (c (? . 2) q time)) q (44548 . 2)) ((c def c (c (? . 4) q empty)) q (59999 . 2)) ((c def c (c (? . 1) q cdaar)) q (34833 . 3)) ((c def c (c (? . 2) q /)) q (58317 . 4)) ((c def c (c (? . 4) q string-ci<?)) q (72063 . 5)) ((c def c (c (? . 3) q memq?)) q (7818 . 4)) ((c def c (c (? . 2) q list->string)) q (54748 . 3)) ((c def c (c (? . 1) q not)) q (33962 . 3)) ((c def c (c (? . 3) q caar)) q (6241 . 3)) ((c def c (c (? . 3) q string-length)) q (12038 . 3)) ((c def c (c (? . 4) q hash-ref)) q (78879 . 4)) ((c form c (c (? . 4) q define-struct)) q (61319 . 2)) ((c def c (c (? . 4) q magnitude)) q (64463 . 3)) ((c form c (c (? . 3) q check-satisfied)) q (911 . 2)) ((c def c (c (? . 4) q char-ci<=?)) q (69717 . 5)) ((c form c (c (? . 2) q quote)) q (44699 . 2)) ((c def c (c (? . 0) q =~)) q (27460 . 5)) ((c def c (c (? . 0) q assq)) q (20244 . 4)) ((c def c (c (? . 2) q make-list)) q (51783 . 4)) ((c form c (c (? . 1) q ......)) q (28258 . 2)) ((c def c (c (? . 0) q -)) q (15835 . 4)) ((c def c (c (? . 0) q symbol?)) q (20001 . 3)) ((c def c (c (? . 1) q imag-part)) q (31656 . 3)) ((c def c (c (? . 0) q denominator)) q (17025 . 3)) ((c def c (c (? . 2) q fourth)) q (51429 . 3)) ((c def c (c (? . 1) q compose)) q (43020 . 4)) ((c def c (c (? . 3) q =)) q (1990 . 5)) ((c def c (c (? . 4) q cons?)) q (67579 . 3)) ((c def c (c (? . 1) q char-ci<?)) q (37312 . 5)) ((c def c (c (? . 3) q >=)) q (2170 . 5)) ((c def c (c (? . 1) q make-posn)) q (36885 . 4)) ((c def c (c (? . 3) q implode)) q (10383 . 3)) ((c def c (c (? . 1) q fifth)) q (35383 . 3)) ((c def c (c (? . 4) q string-contains?)) q (72562 . 4)) ((c def c (c (? . 1) q posn-y)) q (37001 . 3)) ((c def c (c (? . 1) q round)) q (33243 . 3)) ((c form c (c (? . 4) q shared)) q (60483 . 2)) ((c def c (c (? . 4) q set-box!)) q (78238 . 4)) ((c def c (c (? . 1) q char-numeric?)) q (37808 . 3)) ((c def c (c (? . 3) q empty)) q (0 . 2)) ((c form c (c (? . 3) q .....)) q (105 . 2)) ((c def c (c (? . 1) q filter)) q (43104 . 4)) ((c def c (c (? . 0) q char-downcase)) q (23568 . 3)) ((c def c (c (? . 1) q string-ci>?)) q (39872 . 5)) ((c def c (c (? . 1) q zero?)) q (33662 . 3)) ((c def c (c (? . 3) q real?)) q (4786 . 3)) ((c def c (c (? . 4) q acos)) q (62971 . 3)) ((c def c (c (? . 2) q equal~?)) q (57861 . 5)) ((c def c (c (? . 3) q complex?)) q (2597 . 3)) ((c def c (c (? . 2) q length)) q (51478 . 3)) ((c def c (c (? . 4) q boolean->string)) q (66054 . 3)) ((c def c (c (? . 3) q sinh)) q (5090 . 3)) ((c def c (c (? . 3) q <)) q (1815 . 5)) ((c def c (c (? . 2) q member)) q (51863 . 4)) ((c def c (c (? . 4) q char-ci<?)) q (69813 . 5)) ((c def c (c (? . 2) q string-contains?)) q (56011 . 4)) ((c def c (c (? . 4) q hash-set!)) q (79287 . 5)) ((c form c (c (? . 1) q quote)) q (28540 . 2)) ((c def c (c (? . 4) q fifth)) q (67731 . 3)) ((c def c (c (? . 1) q lcm)) q (31999 . 4)) ((c def c (c (? . 3) q eqv?)) q (13707 . 4)) ((c def c (c (? . 1) q acos)) q (30631 . 3)) ((c def c (c (? . 2) q negative?)) q (48481 . 3)) ((c def c (c (? . 2) q char-ci<?)) q (53262 . 5)) ((c def c (c (? . 2) q even?)) q (47199 . 3)) ((c def c (c (? . 3) q equal~?)) q (13604 . 5)) ((c def c (c (? . 3) q eq?)) q (13465 . 4)) ((c def c (c (? . 0) q symbol->string)) q (19867 . 3)) ((c def c (c (? . 0) q string-contains?)) q (25936 . 4)) ((c def c (c (? . 0) q string-alphabetic?)) q (25205 . 3)) ((c def c (c (? . 0) q char-ci<?)) q (23187 . 5)) ((c def c (c (? . 4) q exp)) q (63754 . 3)) ((c def c (c (? . 0) q char-whitespace?)) q (23854 . 3)) ((c def c (c (? . 4) q posn-x)) q (69317 . 3)) ((c def c (c (? . 4) q null?)) q (68658 . 3)) ((c def c (c (? . 4) q min)) q (64730 . 4)) ((c def c (c (? . 2) q char-numeric?)) q (53758 . 3)) ((c def c (c (? . 2) q complex?)) q (46876 . 3)) ((c def c (c (? . 4) q exact?)) q (63701 . 3)) ((c def c (c (? . 4) q car)) q (67127 . 3)) ((c form c (c (? . 4) q begin)) q (60331 . 2)) ((c def c (c (? . 1) q exp)) q (31414 . 3)) ((c def c (c (? . 0) q list*)) q (21514 . 4)) ((c def c (c (? . 1) q complex?)) q (30926 . 3)) ((c def c (c (? . 1) q string-lower-case?)) q (40400 . 3)) ((c def c (c (? . 4) q /)) q (75183 . 4)) ((c def c (c (? . 4) q char-ci>?)) q (70099 . 5)) ((c def c (c (? . 2) q cadddr)) q (50593 . 3)) ((c def c (c (? . 2) q empty)) q (44049 . 2)) ((c def c (c (? . 1) q caadr)) q (34500 . 3)) ((c def c (c (? . 0) q char-ci>=?)) q (23377 . 5)) ((c def c (c (? . 3) q <=)) q (1902 . 5)) ((c def c (c (? . 0) q eqv?)) q (27889 . 4)) ((c def c (c (? . 0) q string-ci>?)) q (25747 . 5)) ((c def c (c (? . 1) q >=)) q (30499 . 5)) ((c def c (c (? . 1) q false?)) q (33910 . 3)) ((c def c (c (? . 0) q reverse)) q (22516 . 3)) ((c form c (c (? . 4) q .....)) q (60104 . 2)) ((c def c (c (? . 3) q char-alphabetic?)) q (8848 . 3)) ((c def c (c (? . 3) q make-polar)) q (3846 . 4)) ((c form c (c (? . 3) q ..)) q (72 . 2)) ((c def c (c (? . 4) q make-rectangular)) q (64586 . 4)) ((c def c (c (? . 0) q string<=?)) q (26671 . 5)) ((c def c (c (? . 3) q cdaar)) q (6526 . 3)) ((c form c (c (? . 0) q or)) q (14930 . 2)) ((c def c (c (? . 0) q number?)) q (18497 . 3)) ((c def c (c (? . 3) q boolean=?)) q (5447 . 4)) ((c def c (c (? . 2) q exp)) q (47364 . 3)) ((c def c (c (? . 0) q caadr)) q (20375 . 3)) ((c form c (c (? . 3) q cond)) q (435 . 5)) ((c form c (c (? . 3) q check-member-of)) q (1104 . 2)) ((c def c (c (? . 3) q cdddr)) q (6717 . 3)) ((c def c (c (? . 3) q rest)) q (8287 . 3)) ((c def c (c (? . 2) q max)) q (48273 . 4)) ((c def c (c (? . 1) q second)) q (36690 . 3)) ((c def c (c (? . 4) q char>=?)) q (70818 . 5)) ((c def c (c (? . 1) q car)) q (34787 . 3)) ((c def c (c (? . 4) q sgn)) q (65632 . 3)) ((c def c (c (? . 1) q string->int)) q (39073 . 3)) ((c form c (c (? . 1) q local)) q (28272 . 2)) ((c def c (c (? . 4) q vector)) q (77738 . 3)) ((c def c (c (? . 2) q denominator)) q (47122 . 3)) ((c def c (c (? . 4) q string-numeric?)) q (72966 . 3)) ((c def c (c (? . 4) q char-ci>=?)) q (70003 . 5)) ((c def c (c (? . 4) q string<?)) q (73398 . 5)) ((c def c (c (? . 4) q real-part)) q (65403 . 3)) ((c def c (c (? . 3) q lcm)) q (3670 . 4)) ((c def c (c (? . 3) q null)) q (7969 . 2)) ((c def c (c (? . 1) q member?)) q (35984 . 4)) ((c def c (c (? . 0) q string>=?)) q (26972 . 5)) ((c def c (c (? . 1) q char<=?)) q (38040 . 5)) ((c def c (c (? . 2) q string-upcase)) q (56558 . 3)) ((c def c (c (? . 4) q caadr)) q (66840 . 3)) ((c def c (c (? . 4) q pretty-print)) q (76942 . 3)) ((c def c (c (? . 0) q cons?)) q (21106 . 3)) ((c def c (c (? . 0) q list)) q (21462 . 3)) ((c def c (c (? . 4) q string-contains-ci?)) q (72476 . 4)) ((c def c (c (? . 4) q false?)) q (66250 . 3)) ((c def c (c (? . 1) q char-ci>?)) q (37598 . 5)) ((c form c (c (? . 0) q check-random)) q (15038 . 2)) ((c def c (c (? . 4) q string->number)) q (71696 . 3)) ((c def c (c (? . 4) q hash-copy)) q (78351 . 3)) ((c def c (c (? . 4) q explode)) q (71054 . 3)) ((c def c (c (? . 2) q min)) q (48340 . 4)) ((c def c (c (? . 2) q <)) q (46094 . 5)) ((c def c (c (? . 3) q string<?)) q (12590 . 5)) ((c def c (c (? . 1) q quicksort)) q (43848 . 4)) ((c def c (c (? . 3) q make-list)) q (7526 . 4)) ((c def c (c (? . 4) q make-hasheq)) q (79672 . 2)) ((c def c (c (? . 3) q sgn)) q (4963 . 3)) ((c def c (c (? . 2) q odd?)) q (48705 . 3)) ((c def c (c (? . 2) q substring)) q (57301 . 5)) ((c def c (c (? . 3) q string-ci=?)) q (11358 . 5)) ((c def c (c (? . 0) q tan)) q (19467 . 3)) ((c def c (c (? . 3) q eighth)) q (6975 . 3)) ((c def c (c (? . 3) q string-contains-ci?)) q (11668 . 4)) ((c def c (c (? . 4) q eof)) q (74242 . 2)) ((c def c (c (? . 2) q remainder)) q (49116 . 4)) ((c def c (c (? . 2) q boolean=?)) q (49726 . 4)) ((c def c (c (? . 2) q memf)) q (59552 . 4)) ((c def c (c (? . 0) q char-upper-case?)) q (23793 . 3)) ((c def c (c (? . 0) q sqrt)) q (19369 . 3)) ((c def c (c (? . 2) q cons?)) q (51181 . 3)) ((c def c (c (? . 2) q eqv?)) q (57964 . 4)) ((c def c (c (? . 0) q acos)) q (16484 . 3)) ((c def c (c (? . 3) q boolean?)) q (5527 . 3)) ((c form c (c (? . 2) q let)) q (44494 . 2)) ((c def c (c (? . 4) q void?)) q (75032 . 3)) ((c form c (c (? . 4) q check-satisfied)) q (61853 . 2)) ((c form c (c (? . 2) q define-struct)) q (44929 . 2)) ((c def c (c (? . 2) q equal?)) q (57790 . 4)) ((c def c (c (? . 1) q image?)) q (41533 . 3)) ((c def c (c (? . 3) q char-lower-case?)) q (9440 . 3)) ((c def c (c (? . 1) q make-polar)) q (32175 . 4)) ((c def c (c (? . 4) q char-ci=?)) q (69908 . 5)) ((c def c (c (? . 4) q cadar)) q (66935 . 3)) ((c def c (c (? . 4) q char-alphabetic?)) q (69656 . 3)) ((c def c (c (? . 2) q random)) q (48905 . 3)) ((c def c (c (? . 2) q memq)) q (52006 . 4)) ((c def c (c (? . 0) q assoc)) q (20146 . 4)) ((c def c (c (? . 1) q make-rectangular)) q (32246 . 4)) ((c def c (c (? . 3) q string-contains?)) q (11754 . 4)) ((c def c (c (? . 2) q fifth)) q (51333 . 3)) ((c def c (c (? . 4) q remove)) q (68816 . 4)) ((c form c (c (? . 4) q and)) q (61636 . 2)) ((c def c (c (? . 1) q inexact->exact)) q (31708 . 3)) ((c def c (c (? . 4) q eq?)) q (74325 . 4)) ((c def c (c (? . 3) q number?)) q (4315 . 3)) ((c def c (c (? . 0) q member?)) q (21859 . 4)) ((c def c (c (? . 1) q false)) q (28187 . 2)) ((c def c (c (? . 4) q string-copy)) q (72645 . 3)) ((c def c (c (? . 0) q false?)) q (19763 . 3)) ((c def c (c (? . 4) q with-output-to-string)) q (77393 . 3)) ((c def c (c (? . 0) q string->int)) q (24948 . 3)) ((c def c (c (? . 4) q make-hash)) q (79632 . 2)) ((c form c (c (? . 1) q check-error)) q (29623 . 3)) ((c def c (c (? . 0) q char-ci>?)) q (23473 . 5)) ((c form c (c (? . 4) q cond)) q (61377 . 5)) ((c def c (c (? . 2) q foldr)) q (59255 . 5)) ((c def c (c (? . 4) q odd?)) q (65095 . 3)) ((c def c (c (? . 1) q null)) q (36276 . 2)) ((c def c (c (? . 0) q make-string)) q (24729 . 4)) ((c def c (c (? . 1) q eighth)) q (35282 . 3)) ((c form c (c (? . 2) q Î»)) q (44236 . 2)) ((c def c (c (? . 4) q assoc)) q (66611 . 4)) ((c def c (c (? . 0) q posn?)) q (22922 . 3)) ((c def c (c (? . 4) q string-ci=?)) q (72166 . 5)) ((c def c (c (? . 0) q null)) q (22151 . 2)) ((c def c (c (? . 2) q andmap)) q (58420 . 4)) ((c def c (c (? . 0) q second)) q (22565 . 3)) ((c def c (c (? . 3) q e)) q (2903 . 2)) ((c def c (c (? . 0) q string-ci<?)) q (25437 . 5)) ((c def c (c (? . 4) q abs)) q (62927 . 3)) ((c def c (c (? . 1) q integer?)) q (31945 . 3)) ((c def c (c (? . 3) q string-ci>=?)) q (11461 . 5)) ((c def c (c (? . 0) q string?)) q (27173 . 3)) ((c def c (c (? . 2) q char-ci>=?)) q (53452 . 5)) ((c form c (c (? . 4) q local)) q (60986 . 2)) ((c def c (c (? . 1) q string-ci=?)) q (39665 . 5)) ((c def c (c (? . 3) q exact->inexact)) q (2973 . 3)) ((c def c (c (? . 1) q number->string)) q (32585 . 3)) ((c def c (c (? . 4) q denominator)) q (63512 . 3)) ((c def c (c (? . 3) q cosh)) q (2753 . 3)) ((c def c (c (? . 1) q true)) q (28163 . 2)) ((c def c (c (? . 3) q not)) q (5633 . 3)) ((c def c (c (? . 0) q list?)) q (21659 . 3)) ((c def c (c (? . 1) q char?)) q (38502 . 3)) ((c def c (c (? . 1) q char-ci=?)) q (37407 . 5)) ((c def c (c (? . 0) q cos)) q (16887 . 3)) ((c def c (c (? . 0) q fifth)) q (21258 . 3)) ((c def c (c (? . 1) q string>=?)) q (41097 . 5)) ((c def c (c (? . 0) q member)) q (21788 . 4)) ((c def c (c (? . 2) q remove-all)) q (52472 . 4)) ((c def c (c (? . 3) q sqr)) q (5139 . 3)) ((c form c (c (? . 4) q check-within)) q (61901 . 2)) ((c def c (c (? . 4) q vector-length)) q (77868 . 3)) ((c def c (c (? . 3) q abs)) q (2258 . 3)) ((c def c (c (? . 3) q posn-x)) q (8648 . 3)) ((c def c (c (? . 3) q cdar)) q (6622 . 3)) ((c def c (c (? . 1) q string-length)) q (40345 . 3)) ((c def c (c (? . 3) q list)) q (7280 . 3)) ((c def c (c (? . 2) q eof-object?)) q (57665 . 3)) ((c def c (c (? . 0) q fourth)) q (21354 . 3)) ((c form c (c (? . 4) q or)) q (61690 . 2)) ((c def c (c (? . 1) q eof)) q (41689 . 2)) ((c def c (c (? . 3) q struct?)) q (13905 . 3)) ((c def c (c (? . 4) q caaar)) q (66792 . 3)) ((c def c (c (? . 0) q int->string)) q (24616 . 3)) ((c def c (c (? . 0) q string-upcase)) q (26483 . 3)) ((c form c (c (? . 1) q .....)) q (28245 . 2)) ((c def c (c (? . 1) q eof-object?)) q (41715 . 3)) ((c form c (c (? . 4) q define)) q (61224 . 2)) ((c def c (c (? . 4) q with-input-from-file)) q (77137 . 4)) ((c def c (c (? . 2) q range)) q (52297 . 5)) ((c form c (c (? . 4) q set!)) q (60420 . 2)) ((c def c (c (? . 4) q string>?)) q (73699 . 5)) ((c def c (c (? . 3) q remove)) q (8147 . 4)) ((c def c (c (? . 3) q memq)) q (7749 . 4)) ((c def c (c (? . 0) q inexact?)) q (17620 . 3)) ((c def c (c (? . 3) q error)) q (13776 . 3)) ((c def c (c (? . 3) q denominator)) q (2843 . 3)) ((c form c (c (? . 0) q check-range)) q (15352 . 2)) ((c def c (c (? . 2) q real-part)) q (49013 . 3)) ((c def c (c (? . 4) q conjugate)) q (63320 . 3)) ((c def c (c (? . 2) q list)) q (51537 . 3)) ((c def c (c (? . 3) q caadr)) q (6193 . 3)) ((c def c (c (? . 4) q apply)) q (75390 . 5)) ((c def c (c (? . 0) q identity)) q (28038 . 3)) ((c def c (c (? . 2) q map)) q (59460 . 4)) ((c def c (c (? . 2) q boolean->string)) q (49664 . 3)) ((c def c (c (? . 1) q cos)) q (31034 . 3)) ((c form c (c (? . 0) q define-struct)) q (14516 . 2)) ((c def c (c (? . 4) q exit)) q (74689 . 2)) ((c form c (c (? . 4) q define-datatype)) q (60254 . 2)) ((c def c (c (? . 1) q procedure?)) q (43794 . 3)) ((c def c (c (? . 4) q foldl)) q (76013 . 5)) ((c form c (c (? . 0) q ...)) q (14040 . 2)) ((c def c (c (? . 4) q string-upcase)) q (73109 . 3)) ((c def c (c (? . 3) q string->symbol)) q (10964 . 3)) ((c def c (c (? . 3) q gcd)) q (3251 . 4)) ((c def c (c (? . 1) q substring)) q (41351 . 5)) ((c def c (c (? . 4) q foldr)) q (76121 . 5)) ((c def c (c (? . 0) q error)) q (27958 . 3)) ((c def c (c (? . 1) q caaar)) q (34452 . 3)) ((c def c (c (? . 0) q range)) q (22222 . 5)) ((c def c (c (? . 0) q cadr)) q (20615 . 3)) ((c def c (c (? . 3) q list->string)) q (10491 . 3)) ((c def c (c (? . 4) q filter)) q (75920 . 4)) ((c def c (c (? . 1) q magnitude)) q (32123 . 3)) ((c def c (c (? . 3) q -)) q (1653 . 4)) ((c def c (c (? . 3) q inexact->exact)) q (3379 . 3)) ((c def c (c (? . 1) q list?)) q (35784 . 3)) ((c def c (c (? . 4) q numerator)) q (65037 . 3)) ((c def c (c (? . 2) q char->integer)) q (53048 . 3)) ((c def c (c (? . 4) q make-hasheqv)) q (79714 . 2)) ((c def c (c (? . 0) q numerator)) q (18550 . 3)) ((c def c (c (? . 3) q list-ref)) q (7404 . 4)) ((c form c (c (? . 0) q unquote-splicing)) q (14312 . 2)) ((c def c (c (? . 0) q current-seconds)) q (16984 . 2)) ((c def c (c (? . 1) q explode)) q (38553 . 3)) ((c def c (c (? . 3) q third)) q (8530 . 3)) ((c def c (c (? . 3) q eof)) q (13382 . 2)) ((c def c (c (? . 3) q make-rectangular)) q (3917 . 4)) ((c def c (c (? . 4) q not)) q (66302 . 3)) ((c def c (c (? . 0) q sqr)) q (19321 . 3)) ((c def c (c (? . 0) q char-ci=?)) q (23282 . 5)) ((c def c (c (? . 2) q cdddr)) q (50974 . 3)) ((c def c (c (? . 0) q string-append)) q (25270 . 3)) ((c def c (c (? . 0) q char>=?)) q (24192 . 5)) ((c def c (c (? . 2) q string-whitespace?)) q (56681 . 3)) ((c def c (c (? . 4) q reverse)) q (69003 . 3)) ((c def c (c (? . 4) q sqrt)) q (65856 . 3)) ((c def c (c (? . 2) q remove)) q (52404 . 4)) ((c def c (c (? . 2) q +)) q (58266 . 3)) ((c def c (c (? . 2) q sixth)) q (52739 . 3)) ((c def c (c (? . 1) q for-each)) q (43413 . 4)) ((c def c (c (? . 3) q cons)) q (6858 . 4)) ((c def c (c (? . 4) q list->string)) q (71299 . 3)) ((c def c (c (? . 4) q format)) q (71116 . 4)) ((c def c (c (? . 3) q atan)) q (2497 . 3)) ((c def c (c (? . 2) q error)) q (58033 . 3)) ((c form c (c (? . 2) q define)) q (44574 . 2)) ((c def c (c (? . 1) q expt)) q (31462 . 4)) ((c def c (c (? . 1) q string-contains?)) q (40061 . 4)) ((c def c (c (? . 2) q round)) q (49193 . 3)) ((c def c (c (? . 2) q tan)) q (49564 . 3)) ((c def c (c (? . 0) q make-list)) q (21708 . 4)) ((c def c (c (? . 3) q modulo)) q (4128 . 4)) ((c def c (c (? . 0) q exact->inexact)) q (17155 . 3)) ((c def c (c (? . 1) q /)) q (42367 . 4)) ((c def c (c (? . 2) q string-contains-ci?)) q (55925 . 4)) ((c def c (c (? . 3) q equal?)) q (13533 . 4)) ((c def c (c (? . 3) q *)) q (1471 . 5)) ((c def c (c (? . 1) q symbol->string)) q (34014 . 3)) ((c def c (c (? . 2) q integer-sqrt)) q (47836 . 3)) ((c form c (c (? . 3) q quote)) q (313 . 2)) ((c def c (c (? . 1) q string<=?)) q (40796 . 5)) ((c def c (c (? . 4) q cadddr)) q (66983 . 3)) ((c def c (c (? . 4) q third)) q (69199 . 3)) ((c def c (c (? . 0) q sub1)) q (19418 . 3)) ((c def c (c (? . 2) q number?)) q (48594 . 3)) ((c def c (c (? . 0) q char=?)) q (24100 . 5)) ((c def c (c (? . 4) q string-ith)) q (72761 . 4)) ((c def c (c (? . 4) q read)) q (77110 . 2)) ((c def c (c (? . 3) q member?)) q (7677 . 4)) ((c form c (c (? . 2) q quasiquote)) q (44771 . 2)) ((c def c (c (? . 1) q floor)) q (31531 . 3)) ((c form c (c (? . 1) q require)) q (29838 . 2)) ((c def c (c (? . 4) q set-posn-y!)) q (69530 . 4)) ((c def c (c (? . 2) q caadr)) q (50450 . 3)) ((c def c (c (? . 0) q angle)) q (16582 . 3)) ((c def c (c (? . 2) q *)) q (58215 . 3)) ((c def c (c (? . 4) q assq)) q (66709 . 4)) ((c def c (c (? . 0) q sinh)) q (19272 . 3)) ((c def c (c (? . 3) q sub1)) q (5236 . 3)) ((c def c (c (? . 4) q <=)) q (62571 . 5)) ((c def c (c (? . 2) q sub1)) q (49515 . 3)) ((c form c (c (? . 4) q let*)) q (61089 . 2)) ((c def c (c (? . 2) q modulo)) q (48407 . 4)) ((c def c (c (? . 3) q cddar)) q (6669 . 3)) ((c def c (c (? . 2) q angle)) q (46679 . 3)) ((c def c (c (? . 0) q abs)) q (16440 . 3)) ((c def c (c (? . 4) q e)) q (63572 . 2)) ((c def c (c (? . 0) q sin)) q (19224 . 3)) ((c def c (c (? . 4) q second)) q (69052 . 3)) ((c def c (c (? . 4) q hash-ref!)) q (78948 . 5)) ((c def c (c (? . 1) q int->string)) q (38741 . 3)) ((c def c (c (? . 0) q string-upper-case?)) q (26541 . 3)) ((c def c (c (? . 4) q char-lower-case?)) q (70248 . 3)) ((c def c (c (? . 0) q char-numeric?)) q (23683 . 3)) ((c def c (c (? . 3) q list?)) q (7477 . 3)) ((c form c (c (? . 1) q and)) q (29296 . 2)) ((c def c (c (? . 3) q length)) q (7221 . 3)) ((c form c (c (? . 4) q match)) q (60825 . 2)) ((c def c (c (? . 1) q append)) q (34201 . 3)) ((c def c (c (? . 0) q third)) q (22712 . 3)) ((c def c (c (? . 0) q true)) q (13981 . 2)) ((c def c (c (? . 2) q boolean?)) q (49806 . 3)) ((c def c (c (? . 2) q ormap)) q (59656 . 4)) ((c def c (c (? . 2) q cddar)) q (50926 . 3)) ((c def c (c (? . 2) q =)) q (46269 . 5)) ((c def c (c (? . 4) q add1)) q (63020 . 3)) ((c def c (c (? . 1) q memq?)) q (36125 . 4)) ((c def c (c (? . 4) q ceiling)) q (63215 . 3)) ((c def c (c (? . 3) q remove-all)) q (8215 . 4)) ((c def c (c (? . 1) q gcd)) q (31580 . 4)) ((c def c (c (? . 4) q caddr)) q (67032 . 3)) ((c def c (c (? . 2) q for-each)) q (59363 . 4)) ((c form c (c (? . 0) q quasiquote)) q (14192 . 2)) ((c def c (c (? . 0) q make-polar)) q (18028 . 4)) ((c def c (c (? . 0) q char>?)) q (24285 . 5)) ((c def c (c (? . 3) q integer->char)) q (3493 . 3)) ((c def c (c (? . 3) q symbol?)) q (5819 . 3)) ((c def c (c (? . 4) q member?)) q (68346 . 4)) ((c def c (c (? . 4) q number?)) q (64984 . 3)) ((c def c (c (? . 1) q remainder)) q (33166 . 4)) ((c def c (c (? . 2) q char-upcase)) q (53816 . 3)) ((c def c (c (? . 1) q boolean=?)) q (33776 . 4)) ((c def c (c (? . 4) q with-output-to-file)) q (77309 . 4)) ((c def c (c (? . 0) q string-numeric?)) q (26340 . 3)) ((c def c (c (? . 0) q gcd)) q (17433 . 4)) ((c def c (c (? . 1) q caar)) q (34548 . 3)) ((c def c (c (? . 0) q string-ith)) q (26135 . 4)) ((c def c (c (? . 2) q explode)) q (54503 . 3)) ((c def c (c (? . 1) q odd?)) q (32755 . 3)) ((c def c (c (? . 2) q string-copy)) q (56094 . 3)) ((c def c (c (? . 0) q memq)) q (21931 . 4)) ((c def c (c (? . 4) q rational?)) q (65348 . 3)) ((c def c (c (? . 4) q integer?)) q (64285 . 3)) ((c def c (c (? . 1) q list*)) q (35639 . 4)) ((c def c (c (? . 4) q length)) q (67876 . 3)) ((c def c (c (? . 1) q replicate)) q (38936 . 4)) ((c def c (c (? . 2) q -)) q (46023 . 4)) ((c form c (c (? . 0) q check-within)) q (15141 . 2)) ((c def c (c (? . 4) q hash-remove!)) q (79116 . 4)) ((c def c (c (? . 4) q vector-ref)) q (77928 . 4)) ((c def c (c (? . 2) q string-alphabetic?)) q (55280 . 3)) ((c def c (c (? . 1) q char-lower-case?)) q (37747 . 3)) ((c def c (c (? . 2) q not)) q (49912 . 3)) ((c def c (c (? . 1) q string?)) q (41298 . 3)) ((c def c (c (? . 4) q quicksort)) q (76664 . 4)) ((c def c (c (? . 0) q modulo)) q (18310 . 4)) ((c def c (c (? . 4) q posn)) q (75254 . 2)) ((c def c (c (? . 2) q compose)) q (58970 . 4)) ((c def c (c (? . 4) q cos)) q (63374 . 3)) ((c def c (c (? . 4) q string->symbol)) q (71772 . 3)) ((c def c (c (? . 4) q sinh)) q (65759 . 3)) ((c def c (c (? . 1) q string-upcase)) q (40608 . 3)) ((c def c (c (? . 0) q integer?)) q (17798 . 3)) ((c def c (c (? . 3) q numerator)) q (4368 . 3)) ((c def c (c (? . 4) q make-immutable-hash)) q (79757 . 2)) ((c def c (c (? . 4) q seventh)) q (69101 . 3)) ((c def c (c (? . 4) q vector?)) q (78093 . 3)) ((c def c (c (? . 4) q random)) q (65295 . 3)) ((c def c (c (? . 0) q negative?)) q (18384 . 3)) ((c def c (c (? . 1) q tan)) q (33614 . 3)) ((c def c (c (? . 4) q string->int)) q (71574 . 3)) ((c def c (c (? . 1) q make-list)) q (35833 . 4)) ((c def c (c (? . 1) q struct?)) q (42212 . 3)) ((c def c (c (? . 2) q string)) q (54968 . 3)) ((c def c (c (? . 1) q char-ci<=?)) q (37216 . 5)) ((c def c (c (? . 2) q struct?)) q (58162 . 3)) ((c def c (c (? . 0) q make-rectangular)) q (18099 . 4)) ((c def c (c (? . 4) q memq?)) q (68487 . 4)) ((c def c (c (? . 3) q quotient)) q (4550 . 4)) ((c form c (c (? . 2) q local)) q (44336 . 2)) ((c def c (c (? . 0) q first)) q (21306 . 3)) ((c def c (c (? . 0) q exact?)) q (17214 . 3)) ((c def c (c (? . 2) q replicate)) q (54886 . 4)) ((c def c (c (? . 4) q integer-sqrt)) q (64226 . 3)) ((c def c (c (? . 2) q floor)) q (47481 . 3)) ((c def c (c (? . 3) q false)) q (47 . 2)) ((c def c (c (? . 2) q ceiling)) q (46825 . 3)) ((c form c (c (? . 2) q unquote)) q (44842 . 2)) ((c def c (c (? . 1) q integer-sqrt)) q (31886 . 3)) ((c def c (c (? . 4) q real?)) q (65455 . 3)) ((c def c (c (? . 4) q cadr)) q (67080 . 3)) ((c def c (c (? . 1) q string-ref)) q (40527 . 4)) ((c def c (c (? . 4) q ormap)) q (76522 . 4)) ((c def c (c (? . 4) q promise?)) q (74841 . 3)) ((c def c (c (? . 2) q char<=?)) q (53990 . 5)) ((c def c (c (? . 3) q string-append)) q (11088 . 3)) ((c def c (c (? . 3) q first)) q (7124 . 3)) ((c def c (c (? . 2) q =~)) q (57535 . 5)) ((c def c (c (? . 2) q cdaar)) q (50783 . 3)) ((c def c (c (? . 4) q list->vector)) q (77591 . 3)) ((c def c (c (? . 1) q string-upper-case?)) q (40666 . 3)) ((c def c (c (? . 1) q char-upcase)) q (37866 . 3)) ((c form c (c (? . 1) q check-member-of)) q (29706 . 2)) ((c def c (c (? . 2) q identity)) q (58113 . 3)) ((c def c (c (? . 0) q image?)) q (27408 . 3)) ((c def c (c (? . 4) q hash-for-each)) q (78616 . 4)) ((c def c (c (? . 4) q even?)) q (63589 . 3)) ((c def c (c (? . 4) q for-each)) q (76229 . 4)) ((c form c (c (? . 1) q if)) q (29201 . 4)) ((c def c (c (? . 1) q sqrt)) q (33516 . 3)) ((c form c (c (? . 3) q ....)) q (93 . 2)) ((c form c (c (? . 2) q .....)) q (44154 . 2)) ((c def c (c (? . 2) q char-whitespace?)) q (53929 . 3)) ((c def c (c (? . 3) q tan)) q (5285 . 3)) ((c def c (c (? . 3) q string?)) q (12991 . 3)) ((c form c (c (? . 1) q letrec)) q (28318 . 2)) ((c def c (c (? . 0) q replicate)) q (24811 . 4)) ((c def c (c (? . 2) q eighth)) q (51232 . 3)) ((c def c (c (? . 1) q char-downcase)) q (37693 . 3)) ((c def c (c (? . 4) q cdar)) q (67269 . 3)) ((c form c (c (? . 4) q check-random)) q (61798 . 2)) ((c form c (c (? . 1) q ...)) q (28222 . 2)) ((c def c (c (? . 3) q string>?)) q (12891 . 5)) ((c def c (c (? . 4) q log)) q (64415 . 3)) ((c def c (c (? . 1) q cddar)) q (34976 . 3)) ((c def c (c (? . 0) q sgn)) q (19145 . 3)) ((c def c (c (? . 4) q make-posn)) q (69247 . 4)) ((c def c (c (? . 2) q string->list)) q (55080 . 3)) ((c def c (c (? . 4) q posn-y)) q (69363 . 3)) ((c def c (c (? . 1) q string-contains-ci?)) q (39975 . 4)) ((c def c (c (? . 0) q *)) q (15653 . 5)) ((c def c (c (? . 2) q log)) q (48025 . 3)) ((c def c (c (? . 3) q floor)) q (3202 . 3)) ((c def c (c (? . 3) q string-lower-case?)) q (12093 . 3)) ((c def c (c (? . 3) q replicate)) q (10629 . 4)) ((c def c (c (? . 3) q round)) q (4914 . 3)) ((c def c (c (? . 1) q exact?)) q (31361 . 3)) ((c def c (c (? . 4) q lcm)) q (64339 . 4)) ((c def c (c (? . 0) q format)) q (24490 . 4)) ((c def c (c (? . 2) q eof)) q (57639 . 2)) ((c def c (c (? . 1) q apply)) q (42574 . 5)) ((c def c (c (? . 4) q string?)) q (73799 . 3)) ((c def c (c (? . 4) q string=?)) q (73498 . 5)) ((c def c (c (? . 0) q string-whitespace?)) q (26606 . 3)) ((c def c (c (? . 1) q real-part)) q (33063 . 3)) ((c form c (c (? . 4) q require)) q (62178 . 2)) ((c def c (c (? . 4) q empty?)) q (67679 . 3)) ((c def c (c (? . 4) q display)) q (76865 . 3)) ((c def c (c (? . 2) q build-list)) q (58804 . 4)) ((c def c (c (? . 1) q abs)) q (30587 . 3)) ((c def c (c (? . 1) q sin)) q (33371 . 3)) ((c def c (c (? . 4) q >=)) q (62839 . 5)) ((c def c (c (? . 0) q cddar)) q (20851 . 3)) ((c form c (c (? . 4) q begin0)) q (60375 . 2)) ((c def c (c (? . 4) q <)) q (62484 . 5)) ((c form c (c (? . 1) q check-within)) q (29561 . 2)) ((c def c (c (? . 2) q symbol=?)) q (50023 . 4)) ((c def c (c (? . 4) q vector-set!)) q (78000 . 5)) ((c def c (c (? . 3) q car)) q (6480 . 3)) ((c def c (c (? . 3) q make-posn)) q (8578 . 4)) ((c def c (c (? . 3) q rational?)) q (4679 . 3)) ((c def c (c (? . 1) q rational?)) q (33008 . 3)) ((c def c (c (? . 1) q string-downcase)) q (40200 . 3)) ((c form c (c (? . 4) q ......)) q (60117 . 2)) ((c form c (c (? . 4) q let)) q (61144 . 2)) ((c def c (c (? . 3) q char-whitespace?)) q (9672 . 3)) ((c def c (c (? . 3) q char-ci>=?)) q (9195 . 5)) ((c def c (c (? . 4) q hash-update!)) q (79483 . 5)) ((c def c (c (? . 0) q pi)) q (18660 . 2)) ((c def c (c (? . 1) q foldr)) q (43305 . 5)) ((c def c (c (? . 4) q sixth)) q (69151 . 3)) ((c def c (c (? . 4) q tan)) q (65954 . 3)) ((c def c (c (? . 1) q <)) q (30144 . 5)) ((c form c (c (? . 0) q ....)) q (14051 . 2)) ((c def c (c (? . 4) q fourth)) q (67827 . 3)) ((c def c (c (? . 0) q empty)) q (13958 . 2)) ((c def c (c (? . 2) q acos)) q (46581 . 3)) ((c def c (c (? . 2) q memv)) q (52145 . 4)) ((c def c (c (? . 0) q atan)) q (16679 . 3)) ((c form c (c (? . 3) q check-random)) q (856 . 2)) ((c def c (c (? . 3) q char-ci=?)) q (9100 . 5)) ((c def c (c (? . 1) q *)) q (42265 . 3)) ((c def c (c (? . 3) q format)) q (10308 . 4)) ((c def c (c (? . 2) q make-rectangular)) q (48196 . 4)) ((c def c (c (? . 0) q boolean=?)) q (19629 . 4)) ((c def c (c (? . 4) q implode)) q (71191 . 3)) ((c def c (c (? . 2) q string>?)) q (57148 . 5)) ((c def c (c (? . 4) q list?)) q (68146 . 3)) ((c form c (c (? . 1) q ....)) q (28233 . 2)) ((c def c (c (? . 3) q /)) q (1724 . 5)) ((c def c (c (? . 1) q string>?)) q (41198 . 5)) ((c def c (c (? . 2) q caaar)) q (50402 . 3)) ((c def c (c (? . 2) q positive?)) q (48775 . 3)) ((c form c (c (? . 2) q ...)) q (44131 . 2)) ((c def c (c (? . 4) q cdadr)) q (67221 . 3)) ((c def c (c (? . 0) q image=?)) q (27336 . 4)) ((c def c (c (? . 0) q null?)) q (22171 . 3)) ((c def c (c (? . 1) q number?)) q (32644 . 3)) ((c form c (c (? . 0) q check-expect)) q (14983 . 2)) ((c def c (c (? . 3) q null?)) q (7989 . 3)) ((c def c (c (? . 3) q ceiling)) q (2546 . 3)) ((c def c (c (? . 2) q current-seconds)) q (47081 . 2)) ((c def c (c (? . 1) q angle)) q (30729 . 3)) ((c def c (c (? . 3) q true)) q (23 . 2)) ((c def c (c (? . 4) q make-polar)) q (64515 . 4)) ((c form c (c (? . 4) q ...)) q (60081 . 2)) ((c def c (c (? . 0) q cdar)) q (20804 . 3)) ((c def c (c (? . 3) q false?)) q (5581 . 3)) ((c form c (c (? . 4) q check-member-of)) q (62046 . 2)) ((c def c (c (? . 4) q cons)) q (67505 . 4)) ((c def c (c (? . 4) q hash?)) q (79584 . 3)) ((c def c (c (? . 3) q string->number)) q (10888 . 3)) ((c form c (c (? . 2) q let*)) q (44439 . 2)) ((c def c (c (? . 4) q string-upper-case?)) q (73167 . 3)) ((c def c (c (? . 4) q void)) q (75004 . 2)) ((c def c (c (? . 1) q remove-all)) q (36522 . 4)) ((c form c (c (? . 2) q if)) q (45151 . 4)) ((c def c (c (? . 0) q cosh)) q (16935 . 3)) ((c def c (c (? . 4) q quotient)) q (65219 . 4)) ((c def c (c (? . 0) q string-downcase)) q (26075 . 3)) ((c def c (c (? . 4) q symbol->string)) q (66354 . 3)) ((c def c (c (? . 3) q sqrt)) q (5187 . 3)) ((c def c (c (? . 4) q char-downcase)) q (70194 . 3)) ((c form c (c (? . 1) q check-satisfied)) q (29513 . 2)) ((c def c (c (? . 3) q integer-sqrt)) q (3557 . 3)) ((c form c (c (? . 0) q quote)) q (14120 . 2)) ((c def c (c (? . 0) q integer-sqrt)) q (17739 . 3)) ((c def c (c (? . 0) q <)) q (15997 . 5)) ((c def c (c (? . 1) q cadr)) q (34740 . 3)) ((c def c (c (? . 1) q cadddr)) q (34643 . 3)) ((c def c (c (? . 4) q sleep)) q (74893 . 3)) ((c def c (c (? . 0) q boolean->string)) q (19567 . 3)) ((c def c (c (? . 4) q caar)) q (66888 . 3)) ((c def c (c (? . 2) q zero?)) q (49612 . 3)) ((c def c (c (? . 2) q cadr)) q (50690 . 3)) ((c def c (c (? . 2) q posn)) q (58388 . 2)) ((c def c (c (? . 0) q min)) q (18243 . 4)) ((c form c (c (? . 1) q cond)) q (29037 . 5)) ((c def c (c (? . 1) q string->list)) q (39130 . 3)) ((c form c (c (? . 4) q check-expect)) q (61743 . 2)) ((c form c (c (? . 1) q let)) q (28430 . 2)) ((c def c (c (? . 1) q char-upper-case?)) q (37918 . 3)) ((c def c (c (? . 0) q eof)) q (27564 . 2)) ((c def c (c (? . 1) q denominator)) q (31172 . 3)) ((c form c (c (? . 2) q letrec)) q (44382 . 2)) ((c def c (c (? . 4) q member)) q (68275 . 4)) ((c def c (c (? . 4) q +)) q (75132 . 3)) ((c def c (c (? . 1) q error)) q (42083 . 3)) ((c def c (c (? . 3) q string-copy)) q (11837 . 3)) ((c form c (c (? . 1) q ..)) q (28212 . 2)) ((c def c (c (? . 2) q exit)) q (58086 . 2)) ((c def c (c (? . 2) q make-polar)) q (48125 . 4)) ((c def c (c (? . 0) q eq?)) q (27647 . 4)) ((c def c (c (? . 2) q reverse)) q (52591 . 3)) ((c def c (c (? . 1) q string-ith)) q (40260 . 4)) ((c def c (c (? . 0) q memq?)) q (22000 . 4)) ((c def c (c (? . 4) q string-ci<=?)) q (71959 . 5)) ((c def c (c (? . 1) q =~)) q (41585 . 5)) ((c def c (c (? . 4) q sub1)) q (65905 . 3)) ((c def c (c (? . 1) q list->string)) q (38798 . 3)) ((c def c (c (? . 2) q real?)) q (49065 . 3)) ((c def c (c (? . 1) q sinh)) q (33419 . 3)) ((c form c (c (? . 2) q lambda)) q (44181 . 2)) ((c def c (c (? . 4) q -)) q (62413 . 4)) ((c def c (c (? . 0) q string-copy)) q (26019 . 3)) ((c def c (c (? . 4) q append)) q (66541 . 3)) ((c form c (c (? . 2) q check-error)) q (45573 . 3)) ((c def c (c (? . 1) q e)) q (31232 . 2)) ((c form c (c (? . 4) q time)) q (61198 . 2)) ((c def c (c (? . 2) q string=?)) q (56947 . 5)) ((c form c (c (? . 0) q and)) q (14876 . 2)) ((c def c (c (? . 2) q string-ci<?)) q (55512 . 5)) ((c def c (c (? . 3) q cdr)) q (6812 . 3)) ((c def c (c (? . 2) q e)) q (47182 . 2)) ((c def c (c (? . 1) q member)) q (35913 . 4)) ((c def c (c (? . 1) q char>=?)) q (38317 . 5)) ((c def c (c (? . 4) q char->integer)) q (69599 . 3)) ((c def c (c (? . 4) q string-ci>?)) q (72373 . 5)) ((c def c (c (? . 0) q odd?)) q (18608 . 3)) ((c def c (c (? . 4) q memq)) q (68418 . 4)) ((c def c (c (? . 2) q string-ci>?)) q (55822 . 5)) ((c def c (c (? . 3) q assq)) q (6062 . 4)) ((c def c (c (? . 1) q char->integer)) q (37098 . 3)) ((c def c (c (? . 2) q third)) q (52787 . 3)) ((c def c (c (? . 3) q string-upcase)) q (12301 . 3)) ((c def c (c (? . 4) q hash-count)) q (78401 . 3)) ((c def c (c (? . 2) q list-ref)) q (51661 . 4)) ((c def c (c (? . 2) q cos)) q (46984 . 3)) ((c def c (c (? . 1) q cons)) q (35165 . 4)) ((c def c (c (? . 4) q printf)) q (77039 . 4)) ((c def c (c (? . 1) q make-string)) q (38854 . 4)) ((c def c (c (? . 3) q string->list)) q (10823 . 3)) ((c def c (c (? . 2) q cddr)) q (51022 . 3)) ((c form c (c (? . 1) q check-range)) q (29772 . 2)) ((c def c (c (? . 0) q ceiling)) q (16728 . 3)) ((c form c (c (? . 3) q check-error)) q (1021 . 3)) ((c def c (c (? . 4) q boolean=?)) q (66116 . 4)) ((c def c (c (? . 4) q andmap)) q (75286 . 4)) ((c form c (c (? . 2) q ..)) q (44121 . 2)) ((c def c (c (? . 4) q char<=?)) q (70541 . 5)) ((c def c (c (? . 1) q fourth)) q (35479 . 3)) ((c def c (c (? . 3) q fourth)) q (7172 . 3)) ((c def c (c (? . 0) q list->string)) q (24673 . 3)) ((c def c (c (? . 3) q number->string)) q (4256 . 3)) ((c form c (c (? . 4) q recur)) q (60538 . 2)) ((c def c (c (? . 4) q string-whitespace?)) q (73232 . 3)) ((c def c (c (? . 0) q complex?)) q (16779 . 3)) ((c def c (c (? . 1) q log)) q (32075 . 3)) ((c def c (c (? . 1) q char>?)) q (38410 . 5)) ((c def c (c (? . 1) q char-ci>=?)) q (37502 . 5)) ((c def c (c (? . 4) q argmin)) q (75592 . 4)) ((c def c (c (? . 4) q =)) q (62659 . 5)) ((c def c (c (? . 2) q rational?)) q (48958 . 3)) ((c def c (c (? . 2) q caar)) q (50498 . 3)) ((c def c (c (? . 3) q exit)) q (13829 . 2)) ((c def c (c (? . 2) q caddr)) q (50642 . 3)) ((c def c (c (? . 2) q posn-y)) q (52951 . 3)) ((c def c (c (? . 4) q modulo)) q (64797 . 4)) ((c def c (c (? . 1) q string-alphabetic?)) q (39330 . 3)) ((c def c (c (? . 1) q max)) q (32323 . 4)) ((c def c (c (? . 0) q false)) q (14005 . 2)) ((c def c (c (? . 2) q assoc)) q (50221 . 4)) ((c def c (c (? . 1) q list)) q (35587 . 3)) ((c def c (c (? . 2) q char-lower-case?)) q (53697 . 3)) ((c def c (c (? . 4) q hash-has-key?)) q (78708 . 4)) ((c def c (c (? . 3) q string-ref)) q (12220 . 4)) ((c def c (c (? . 4) q print)) q (76994 . 3)) ((c def c (c (? . 3) q boolean->string)) q (5385 . 3)) ((c def c (c (? . 3) q string-upper-case?)) q (12359 . 3)) ((c def c (c (? . 0) q integer->char)) q (17675 . 3)) ((c def c (c (? . 2) q string-length)) q (56295 . 3)) ((c def c (c (? . 1) q caddr)) q (34692 . 3)) ((c def c (c (? . 3) q second)) q (8383 . 3)) ((c form c (c (? . 1) q unquote)) q (28683 . 2)) ((c form c (c (? . 4) q ..)) q (60071 . 2)) ((c def c (c (? . 1) q random)) q (32955 . 3)) ((c def c (c (? . 3) q cadar)) q (6288 . 3)) ((c def c (c (? . 1) q posn)) q (42438 . 2)) ((c def c (c (? . 4) q make-immutable-hasheq)) q (79807 . 2)) ((c def c (c (? . 2) q atan)) q (46776 . 3)) ((c form c (c (? . 0) q require)) q (15418 . 2)) ((c def c (c (? . 3) q seventh)) q (8432 . 3)) ((c def c (c (? . 1) q string-ci<?)) q (39562 . 5)) ((c form c (c (? . 0) q if)) q (14781 . 4)) ((c def c (c (? . 3) q int->string)) q (10434 . 3)) ((c def c (c (? . 3) q sin)) q (5042 . 3)) ((c def c (c (? . 1) q ceiling)) q (30875 . 3)) ((c def c (c (? . 3) q symbol=?)) q (5744 . 4)) ((c def c (c (? . 2) q symbol?)) q (50098 . 3))))
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
âname
syntax
(quoteÂ name)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ question-expression
Â Â Â Â then-answer-expression
Â Â Â Â else-answer-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(*Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(+Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(/Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean->stringÂ x)Â ->Â string
Â Â xÂ :Â boolean?
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ xÂ yÂ zÂ ...)Â ->Â list?
Â Â xÂ :Â list?
Â Â yÂ :Â list?
Â Â zÂ :Â list?
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains-ci?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-downcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ eps)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â epsÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ question-expression
Â Â Â Â then-answer-expression
Â Â Â Â else-answer-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(*Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(+Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(/Â xÂ yÂ zÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean->stringÂ x)Â ->Â string
Â Â xÂ :Â boolean?
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ xÂ yÂ zÂ ...)Â ->Â list?
Â Â xÂ :Â list?
Â Â yÂ :Â list?
Â Â zÂ :Â list?
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains-ci?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-downcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ eps)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â epsÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(defineÂ nameÂ (lambdaÂ (variableÂ variableÂ ...)Â expression))
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(nameÂ expressionÂ expressionÂ ...)
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ question-expression
Â Â Â Â then-answer-expression
Â Â Â Â else-answer-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean->stringÂ x)Â ->Â string
Â Â xÂ :Â boolean?
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains-ci?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-downcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ eps)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â epsÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(posn)Â ->Â signature
procedure
(andmapÂ p?Â [l])Â ->Â boolean
Â Â p?Â :Â (XÂ ...Â ->Â boolean)
Â Â lÂ :Â (listofÂ X)Â =Â ...
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ #falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(lambdaÂ (variableÂ variableÂ ...)Â expression)
syntax
(Î»Â (variableÂ variableÂ ...)Â expression)
syntax
(expressionÂ expressionÂ expressionÂ ...)
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
âname
syntax
âpart
syntax
(quoteÂ name)
syntax
(quoteÂ part)
syntax
âname
syntax
âpart
syntax
(quasiquoteÂ name)
syntax
(quasiquoteÂ part)
syntax
,expression
syntax
(unquoteÂ expression)
syntax
,@expression
syntax
(unquote-splicingÂ expression)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ question-expression
Â Â Â Â then-answer-expression
Â Â Â Â else-answer-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean->stringÂ x)Â ->Â string
Â Â xÂ :Â boolean?
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ y)Â ->Â list?
Â Â xÂ :Â any/x
Â Â yÂ :Â list?
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains-ci?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-downcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ eps)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â epsÂ :Â non-negative-real
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(posn)Â ->Â signature
procedure
(andmapÂ p?Â [l])Â ->Â boolean
Â Â p?Â :Â (XÂ ...Â ->Â boolean)
Â Â lÂ :Â (listofÂ X)Â =Â ...
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ #falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
value
emptyÂ :Â empty?
value
trueÂ :Â boolean?
value
falseÂ :Â boolean?
syntax
..
syntax
...
syntax
....
syntax
.....
syntax
......
syntax
(lambdaÂ (variableÂ ...)Â expression)
syntax
(Î»Â (variableÂ ...)Â expression)
syntax
(expressionÂ expressionÂ ...)
syntax
(define-datatypeÂ dataype-nameÂ [variant-nameÂ field-nameÂ ...]Â ...)
syntax
(beginÂ expressionÂ expressionÂ ...)
syntax
(begin0Â expressionÂ expressionÂ ...)
syntax
(set!Â variableÂ expression)
syntax
(delayÂ expression)
syntax
(sharedÂ ([nameÂ expression]Â ...)Â expression)
syntax
(recurÂ nameÂ ([nameÂ expression]Â ...)Â expression)
syntax
(letÂ nameÂ ([nameÂ expression]Â ...)Â expression)
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expression]Â ...Â [(choiceÂ ...)Â expression])
syntax
(caseÂ expressionÂ [(choiceÂ ...)Â expression]Â ...Â [elseÂ expression])
syntax
(matchÂ expressionÂ [patternÂ expression]Â ...)
syntax
(whenÂ question-expressionÂ body-expression)
syntax
(unlessÂ question-expressionÂ body-expression)
syntax
(localÂ [definitionÂ ...]Â expression)
syntax
(letrecÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(let*Â ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(letÂ ([nameÂ expr-for-let]Â ...)Â expression)
syntax
(timeÂ expression)
syntax
(defineÂ (nameÂ variableÂ variableÂ ...)Â expression)
syntax
(defineÂ nameÂ expression)
syntax
(define-structÂ structure-nameÂ (field-nameÂ ...))
syntax
(condÂ [question-expressionÂ answer-expression]Â ...)
(condÂ [question-expressionÂ answer-expression]
Â Â Â Â Â Â ...
Â Â Â Â Â Â [elseÂ answer-expression])
syntax
(ifÂ question-expression
Â Â Â Â then-answer-expression
Â Â Â Â else-answer-expression)
syntax
(andÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(orÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-expectÂ expressionÂ expected-expression)
syntax
(check-randomÂ expressionÂ expected-expression)
syntax
(check-satisfiedÂ expressionÂ predicate)
syntax
(check-withinÂ expressionÂ expected-expressionÂ delta)
syntax
(check-errorÂ expressionÂ expected-error-message)
(check-errorÂ expression)
syntax
(check-member-ofÂ expressionÂ expressionÂ expressionÂ ...)
syntax
(check-rangeÂ expressionÂ low-expressionÂ high-expression)
syntax
(requireÂ string)
syntax
(requireÂ module-name)
syntax
(requireÂ (libÂ stringÂ stringÂ ...))
syntax
(requireÂ (planetÂ stringÂ (stringÂ stringÂ numberÂ number)))
syntax
(requireÂ (planetÂ id))
syntax
(requireÂ (planetÂ string))
procedure
(-Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(<Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(<=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â zÂ :Â number
procedure
(>Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(>=Â xÂ yÂ zÂ ...)Â ->Â boolean?
Â Â xÂ :Â real
Â Â yÂ :Â real
Â Â zÂ :Â real
procedure
(absÂ x)Â ->Â real
Â Â xÂ :Â real
procedure
(acosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(add1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(angleÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(asinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(atanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(ceilingÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(complex?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(conjugateÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(cosÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(coshÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(current-seconds)Â ->Â integer
procedure
(denominatorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
value
eÂ :Â real
procedure
(even?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
procedure
(exact->inexactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(expÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(exptÂ xÂ y)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(floorÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(gcdÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(imag-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(inexact->exactÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(inexact?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(integer->charÂ x)Â ->Â char
Â Â xÂ :Â exact-integer?
procedure
(integer-sqrtÂ x)Â ->Â complex
Â Â xÂ :Â integer
procedure
(integer?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(lcmÂ xÂ yÂ ...)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(logÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(magnitudeÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(make-polarÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(make-rectangularÂ xÂ y)Â ->Â number
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(maxÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(minÂ xÂ yÂ ...)Â ->Â real
Â Â xÂ :Â real
Â Â yÂ :Â real
procedure
(moduloÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(negative?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(number->stringÂ x)Â ->Â string
Â Â xÂ :Â number
procedure
(number?Â n)Â ->Â boolean?
Â Â nÂ :Â any/c
procedure
(numeratorÂ x)Â ->Â integer
Â Â xÂ :Â rational?
procedure
(odd?Â x)Â ->Â boolean?
Â Â xÂ :Â integer
value
piÂ :Â real
procedure
(positive?Â x)Â ->Â boolean?
Â Â xÂ :Â real
procedure
(quotientÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(randomÂ x)Â ->Â natural
Â Â xÂ :Â natural
procedure
(rational?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(real-partÂ x)Â ->Â real
Â Â xÂ :Â number
procedure
(real?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(remainderÂ xÂ y)Â ->Â integer
Â Â xÂ :Â integer
Â Â yÂ :Â integer
procedure
(roundÂ x)Â ->Â integer
Â Â xÂ :Â real
procedure
(sgnÂ x)Â ->Â (unionÂ 1Â #i1.0Â 0Â #i0.0Â -1Â #i-1.0)
Â Â xÂ :Â real
procedure
(sinÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sinhÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sqrtÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(sub1Â x)Â ->Â number
Â Â xÂ :Â number
procedure
(tanÂ x)Â ->Â number
Â Â xÂ :Â number
procedure
(zero?Â x)Â ->Â boolean?
Â Â xÂ :Â number
procedure
(boolean->stringÂ x)Â ->Â string
Â Â xÂ :Â boolean?
procedure
(boolean=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â boolean?
Â Â yÂ :Â boolean?
procedure
(boolean?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(false?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(notÂ x)Â ->Â boolean?
Â Â xÂ :Â boolean?
procedure
(symbol->stringÂ x)Â ->Â string
Â Â xÂ :Â symbol
procedure
(symbol=?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â symbol
Â Â yÂ :Â symbol
procedure
(symbol?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(appendÂ lÂ ...)Â ->Â (listofÂ any)
Â Â lÂ :Â (listofÂ any)
procedure
(assocÂ xÂ l)Â ->Â (unionÂ (listofÂ any)Â #false)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(assqÂ xÂ l)Â ->Â (unionÂ #falseÂ cons?)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(caaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(caddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(carÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(cdaarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdadrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdarÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cddarÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cdddrÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(cddrÂ x)Â ->Â list?
Â Â xÂ :Â list?
procedure
(cdrÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(consÂ xÂ l)Â ->Â (listofÂ X)
Â Â xÂ :Â X
Â Â lÂ :Â (listofÂ X)
procedure
(cons?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eighthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(empty?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(fifthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(firstÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(fourthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(lengthÂ l)Â ->Â natural-number?
Â Â lÂ :Â list?
procedure
(listÂ xÂ ...)Â ->Â list?
Â Â xÂ :Â any/c
procedure
(list*Â xÂ ...Â l)Â ->Â (listofÂ any)
Â Â xÂ :Â any
Â Â lÂ :Â (listofÂ any)
procedure
(list-refÂ xÂ i)Â ->Â any/c
Â Â xÂ :Â list?
Â Â iÂ :Â natural?
procedure
(list?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(make-listÂ iÂ x)Â ->Â list?
Â Â iÂ :Â natural-number
Â Â xÂ :Â any/c
procedure
(memberÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(member?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memqÂ xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memq?Â xÂ l)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(memvÂ xÂ l)Â ->Â (or/cÂ #falseÂ list)
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
value
nullÂ :Â list
procedure
(null?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(rangeÂ startÂ endÂ step)Â ->Â list?
Â Â startÂ :Â number
Â Â endÂ :Â number
Â Â stepÂ :Â number
procedure
(removeÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(remove-allÂ xÂ l)Â ->Â list?
Â Â xÂ :Â any/c
Â Â lÂ :Â list?
procedure
(restÂ x)Â ->Â any/c
Â Â xÂ :Â cons?
procedure
(reverseÂ l)Â ->Â list
Â Â lÂ :Â list?
procedure
(secondÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(seventhÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(sixthÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(thirdÂ x)Â ->Â any/c
Â Â xÂ :Â list?
procedure
(make-posnÂ xÂ y)Â ->Â posn
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(posn-xÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn-yÂ p)Â ->Â any
Â Â pÂ :Â posn
procedure
(posn?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-posn-x!Â pÂ x)Â ->Â void?
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(set-posn-y!Â pÂ x)Â ->Â void
Â Â pÂ :Â posn
Â Â xÂ :Â any
procedure
(char->integerÂ c)Â ->Â integer
Â Â cÂ :Â char
procedure
(char-alphabetic?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-ci<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci<?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-ci>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char-downcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-lower-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-numeric?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-upcaseÂ c)Â ->Â char
Â Â cÂ :Â char
procedure
(char-upper-case?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char-whitespace?Â c)Â ->Â boolean?
Â Â cÂ :Â char
procedure
(char<=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char<?Â xÂ dÂ eÂ ...)Â ->Â boolean?
Â Â xÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>=?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char>?Â cÂ dÂ eÂ ...)Â ->Â boolean?
Â Â cÂ :Â char
Â Â dÂ :Â char
Â Â eÂ :Â char
procedure
(char?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(explodeÂ s)Â ->Â (listofÂ string)
Â Â sÂ :Â string
procedure
(formatÂ fÂ xÂ ...)Â ->Â string
Â Â fÂ :Â string
Â Â xÂ :Â any/c
procedure
(implodeÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(int->stringÂ i)Â ->Â string
Â Â iÂ :Â integer
procedure
(list->stringÂ l)Â ->Â string
Â Â lÂ :Â list?
procedure
(make-stringÂ iÂ c)Â ->Â string
Â Â iÂ :Â natural-number
Â Â cÂ :Â char
procedure
(replicateÂ iÂ s)Â ->Â string
Â Â iÂ :Â natural-number
Â Â sÂ :Â string
procedure
(stringÂ cÂ ...)Â ->Â string?
Â Â cÂ :Â char
procedure
(string->intÂ s)Â ->Â integer
Â Â sÂ :Â string
procedure
(string->listÂ s)Â ->Â (listofÂ char)
Â Â sÂ :Â string
procedure
(string->numberÂ s)Â ->Â (unionÂ numberÂ #false)
Â Â sÂ :Â string
procedure
(string->symbolÂ s)Â ->Â symbol
Â Â sÂ :Â string
procedure
(string-alphabetic?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-appendÂ sÂ ...)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ci<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-ci>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string-contains-ci?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-contains?Â sÂ t)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
procedure
(string-copyÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-downcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-ithÂ sÂ i)Â ->Â 1string?
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-lengthÂ s)Â ->Â nat
Â Â sÂ :Â string
procedure
(string-lower-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-numeric?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-refÂ sÂ i)Â ->Â char
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
procedure
(string-upcaseÂ s)Â ->Â string
Â Â sÂ :Â string
procedure
(string-upper-case?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string-whitespace?Â s)Â ->Â boolean?
Â Â sÂ :Â string
procedure
(string<=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string<?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>=?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string>?Â sÂ tÂ xÂ ...)Â ->Â boolean?
Â Â sÂ :Â string
Â Â tÂ :Â string
Â Â xÂ :Â string
procedure
(string?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(substringÂ sÂ iÂ j)Â ->Â string
Â Â sÂ :Â string
Â Â iÂ :Â natural-number
Â Â jÂ :Â natural-number
procedure
(image=?Â iÂ j)Â ->Â boolean?
Â Â iÂ :Â image
Â Â jÂ :Â image
procedure
(image?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(=~Â xÂ yÂ eps)Â ->Â boolean?
Â Â xÂ :Â number
Â Â yÂ :Â number
Â Â epsÂ :Â non-negative-real
procedure
(current-milliseconds)Â ->Â exact-integer
value
eofÂ :Â eof-object?
procedure
(eof-object?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(eq?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(equal~?Â xÂ yÂ z)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
Â Â zÂ :Â non-negative-real
procedure
(eqv?Â xÂ y)Â ->Â boolean?
Â Â xÂ :Â any/c
Â Â yÂ :Â any/c
procedure
(errorÂ xÂ ...)Â ->Â void?
Â Â xÂ :Â any/c
procedure
(exit)Â ->Â void
procedure
(forceÂ v)Â ->Â any
Â Â vÂ :Â any
procedure
(gensym)Â ->Â symbol?
procedure
(identityÂ x)Â ->Â any
Â Â xÂ :Â any/c
procedure
(promise?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(sleepÂ sec)Â ->Â void
Â Â secÂ :Â positive-num
procedure
(struct?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(void)Â ->Â void?
procedure
(void?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(*Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(+Â xÂ ...)Â ->Â number
Â Â xÂ :Â number
procedure
(/Â xÂ yÂ ...)Â ->Â number
Â Â xÂ :Â number
Â Â yÂ :Â number
procedure
(posn)Â ->Â signature
procedure
(andmapÂ p?Â [l])Â ->Â boolean
Â Â p?Â :Â (XÂ ...Â ->Â boolean)
Â Â lÂ :Â (listofÂ X)Â =Â ...
procedure
(applyÂ fÂ x-1Â ...Â l)Â ->Â Y
Â Â fÂ :Â (X-1Â ...Â X-NÂ ->Â Y)
Â Â x-1Â :Â X-1
Â Â lÂ :Â (listÂ X-i+1Â ...Â X-N)
procedure
(argmaxÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(argminÂ fÂ l)Â ->Â X
Â Â fÂ :Â (XÂ ->Â real)
Â Â lÂ :Â (listofÂ X)
procedure
(build-listÂ nÂ f)Â ->Â (listofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(build-stringÂ nÂ f)Â ->Â string
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â char)
procedure
(composeÂ fÂ g)Â ->Â (XÂ ->Â Z)
Â Â fÂ :Â (YÂ ->Â Z)
Â Â gÂ :Â (XÂ ->Â Y)
procedure
(filterÂ p?Â l)Â ->Â (listofÂ X)
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(foldlÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(foldrÂ fÂ baseÂ lÂ ...)Â ->Â Y
Â Â fÂ :Â (XÂ ...Â YÂ ->Â Y)
Â Â baseÂ :Â Y
Â Â lÂ :Â (listofÂ X)
procedure
(for-eachÂ fÂ lÂ ...)Â ->Â void?
Â Â fÂ :Â (anyÂ ...Â ->Â any)
Â Â lÂ :Â (listofÂ any)
procedure
(mapÂ fÂ lÂ ...)Â ->Â (listofÂ Z)
Â Â fÂ :Â (XÂ ...Â ->Â Z)
Â Â lÂ :Â (listofÂ X)
procedure
(memfÂ p?Â l)Â ->Â (unionÂ #falseÂ (listofÂ X))
Â Â p?Â :Â (XÂ ->Â any)
Â Â lÂ :Â (listofÂ X)
procedure
(ormapÂ p?Â l)Â ->Â boolean
Â Â p?Â :Â (XÂ ->Â boolean)
Â Â lÂ :Â (listofÂ X)
procedure
(procedure?Â x)Â ->Â boolean?
Â Â xÂ :Â any
procedure
(quicksortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(sortÂ lÂ comp)Â ->Â (listofÂ X)
Â Â lÂ :Â (listofÂ X)
Â Â compÂ :Â (XÂ XÂ ->Â boolean)
procedure
(displayÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(newline)Â ->Â void
procedure
(pretty-printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(printfÂ fÂ xÂ ...)Â ->Â void
Â Â fÂ :Â string
Â Â xÂ :Â any
procedure
(read)Â ->Â sexp
procedure
(with-input-from-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-input-from-stringÂ sÂ p)Â ->Â any
Â Â sÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-fileÂ fÂ p)Â ->Â any
Â Â fÂ :Â string
Â Â pÂ :Â (->Â any)
procedure
(with-output-to-stringÂ p)Â ->Â any
Â Â pÂ :Â (->Â any)
procedure
(writeÂ x)Â ->Â void
Â Â xÂ :Â any
procedure
(build-vectorÂ nÂ f)Â ->Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â fÂ :Â (natÂ ->Â X)
procedure
(list->vectorÂ l)Â ->Â (vectorofÂ X)
Â Â lÂ :Â (listofÂ X)
procedure
(make-vectorÂ nÂ x)Â ->Â (vectorofÂ X)
Â Â nÂ :Â number
Â Â xÂ :Â X
procedure
(vectorÂ xÂ ...)Â ->Â (vectorÂ XÂ ...)
Â Â xÂ :Â X
procedure
(vector->listÂ v)Â ->Â (listofÂ X)
Â Â vÂ :Â (vectorofÂ X)
procedure
(vector-lengthÂ v)Â ->Â nat
Â Â vÂ :Â (vectorÂ X)
procedure
(vector-refÂ vÂ n)Â ->Â X
Â Â vÂ :Â (vectorÂ X)
Â Â nÂ :Â nat
procedure
(vector-set!Â vÂ nÂ x)Â ->Â void
Â Â vÂ :Â (vectorofÂ X)
Â Â nÂ :Â nat
Â Â xÂ :Â X
procedure
(vector?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(boxÂ x)Â ->Â box?
Â Â xÂ :Â any/c
procedure
(box?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
procedure
(set-box!Â bÂ x)Â ->Â void
Â Â bÂ :Â box?
Â Â xÂ :Â any/c
procedure
(unboxÂ b)Â ->Â any
Â Â bÂ :Â box?
procedure
(hash-copyÂ h)Â ->Â hash
Â Â hÂ :Â hash
procedure
(hash-countÂ h)Â ->Â integer
Â Â hÂ :Â hash
procedure
(hash-eq?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-equal?Â h)Â ->Â boolean
Â Â hÂ :Â hash?
procedure
(hash-eqv?Â h)Â ->Â boolean
Â Â hÂ :Â hash
procedure
(hash-for-eachÂ hÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â any)
procedure
(hash-has-key?Â hÂ x)Â ->Â boolean
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-mapÂ hÂ f)Â ->Â (listofÂ Z)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â fÂ :Â (XÂ YÂ ->Â Z)
procedure
(hash-refÂ hÂ k)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-ref!Â hÂ kÂ v)Â ->Â Y
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-removeÂ hÂ k)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
procedure
(hash-remove!Â hÂ x)Â ->Â void
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â xÂ :Â X
procedure
(hash-setÂ hÂ kÂ v)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-set!Â hÂ kÂ v)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â vÂ :Â Y
procedure
(hash-updateÂ hÂ kÂ f)Â ->Â (hashÂ XÂ Y)
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash-update!Â hÂ kÂ f)Â ->Â void?
Â Â hÂ :Â (hashÂ XÂ Y)
Â Â kÂ :Â X
Â Â fÂ :Â (YÂ ->Â Y)
procedure
(hash?Â x)Â ->Â boolean
Â Â xÂ :Â any
procedure
(make-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-hasheqv)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hash)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheq)Â ->Â (hashÂ XÂ Y)
procedure
(make-immutable-hasheqv)Â ->Â (hashÂ XÂ Y)
